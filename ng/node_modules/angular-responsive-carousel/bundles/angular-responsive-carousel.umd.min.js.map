{"version":3,"sources":["../../../projects/angular-responsive-carousel/src/lib/touches.ts","../../../projects/angular-responsive-carousel/src/lib/carousel.ts","../../../projects/angular-responsive-carousel/src/lib/container.ts","../../../projects/angular-responsive-carousel/src/lib/cells.ts","../../../projects/angular-responsive-carousel/src/lib/slide.ts","../../../projects/angular-responsive-carousel/src/lib/utils.ts","../../../projects/angular-responsive-carousel/src/lib/carousel.component.ts","../../../projects/angular-responsive-carousel/src/lib/carousel.module.ts"],"names":["Touches","properties","_this","this","eventType","undefined","handlers","startX","startY","lastTap","doubleTapMinTimeout","tapMinTimeout","touchstartTime","i","isMousedown","_touchListeners","touchstart","touchmove","touchend","_mouseListeners","mousedown","mousemove","mouseup","wheel","_otherListeners","resize","handleTouchstart","event","elementPosition","getElementPosition","Date","getTime","getTouchstartPosition","runHandler","handleTouchmove","touches","detectPan","detectPinch","detectLinearSwipe","swipeType","handleLinearSwipe","handleTouchend","detectDoubleTap","detectTap","length","handleMousedown","getMousedownPosition","handleMousemove","handleMouseup","handleWheel","handleResize","element","toggleEventListeners","Object","defineProperty","prototype","touchListeners","mouseListeners","otherListeners","destroy","action","listeners","listener","assign","detectTouchScreen","handler","window","addEventListener","removeEventListener","document","addEventListeners","removeEventListeners","getLinearSwipeType","eventName","response","currentTime","tapLength","clearTimeout","doubleTapTimeout","setTimeout","movementX","Math","abs","moveLeft","moveTop","getBoundingClientRect","clientX","left","clientY","top","index","prefixes","split","query","matchMedia","matches","mq","join","on","Carousel","utils","cells","container","slide","isContentImages","isLazyLoad","isContainerLocked","alignCells","initialContainerPosition","containerPullLimit","handleHorizontalSwipe","freeScroll","isNextArrowDisabled","isPrevArrowDisabled","init","cellLength","images","visibleCellsCount","overflowCellsLimit","isImagesLessCellLimit","floor","isLightDOM","lightDOM","loop","margin","minSwipeDistance","transitionDuration","transitionTimingFunction","cellWidth","ceil","visibleWidth","fullCellWidth","counter","cellLengthInLightDOMMode","cellsElement","parentElement","clientWidth","lineUpCells","lineUp","handleTransitionend","getImage","next","prev","autoplay","autoplayId","setInterval","autoplayInterval","stopAutoplay","clearInterval","Container","carouselProperties","newPositionIndex","initialPositionX","initialElementPositionX","isLocked","pullLimit","tooFewCells","setWidth","getStartX","startTime","getInitialElementPositionX","disabled","isSwipeInProgress","moveX","getMoveX","move","simpleProcessing","finishMoving","clearInitialValues","positionX","getMovePositionX","isPulled","detectPulled","direction","getDirection","edge","slowdownOnPull","transformPositionX","overflowX","distance","getDistance","currentPositionX","getCurrentPositionX","getEndPosition","_positionX","endPosition","decelerationRatio","rubberPositionX","containerWidth","getWidth","newPositionX","getInertia","getAlignedPositionOnPull","setInitialPosition","inertia","parentPosition","imageUtils","getImages","width","value","duration","style","transition","transform","totalImageWidth","position","carouselElementPosition","getCarouselElementPosition","sign","ImageUtils","cellStack","filter","comparePositions","a","b","cell","img","Cells","children","getCellPositionInContainer","push","ifSequenceOfCellsIsChanged","cellIndexInDOMTree","getCellIndexInContainer","positionIndex","cellIndex","imageIndex","getImageIndex","file","type","image","setCounter","Slide","_counter","hostElement","isNotClickOnArrow","isSlideLengthLimited","isSlideInProgress","distanceAbs","handleSlide","alignContainerFast","detectClickOnArrow","target","classList","contains","customSlideLength","slideLength","limitSlideLength","getSlideLength","getPreliminaryCounter","isSlidesEnd","getPositionByIndex","select","newCounter","getPositionCorrection","correction","isLastSlide","cellsWidth","getDistanceAbs","visibleCellsOverflowContainer","imageLength","isLightDOMMode","ifLeftDOMModeAtEnd","getPositionWithoutCorrection","provideSafePosition","remainder","fixedContainerPosition","ifLeftDOMModeToBeginning","containerPositionX","flag","remainderOfCells","Utils","carouselElementPositionX","CarouselComponent","elementRef","ref","minTimeout","_cellWidth","_loop","_lightDOM","events","EventEmitter","height","pauseOnHover","dots","objectFit","counterSeparator","cellsToScroll","arrows","arrowsTheme","hostClassCarousel","carousel","isMoving","preventDefault","handleTap","nodes","Array","slice","call","cellElement","srcElement","closest","indexOf","slideCounter","lapCounter","innerWidth","innerHeight","ua","navigator","userAgent","toLowerCase","nativeElement","querySelector","_isCounter","cellLimit","_images","onWindowResize","landscapeMode","isLandscape","detectChanges","initCarousel","onMousemove","onMouseleave","ngOnInit","isNgContent","setDimensions","ngAfterViewInit","getCellLength","dotsArr","fill","detectDomChanges","ngOnChanges","changes","ngOnDestroy","id","getCellWidth","videoProperties","eventHandler","MutationObserver","mutations","onDomChanges","observe","attributes","childList","characterData","hostStyleHeight","hostStyleWidth","handleTransitionendCellContainer","toggleVideo","video","noPlay","paused","play","isVideoPlaying","pause","elementWidth","cellsToShow","Component","args","selector","template","ElementRef","ChangeDetectorRef","Output","Input","HostBinding","HostListener","NgModule","declarations","imports","CommonModule","exports","providers","bootstrap","entryComponents"],"mappings":"0WAaA,IAAAA,EAAA,WA2CI,SAAAA,EAAYC,GAAZ,IAAAC,EAAAC,KAvCAA,KAAAC,eAAuBC,EACvBF,KAAAG,SAAgB,GAChBH,KAAAI,OAAS,EACTJ,KAAAK,OAAS,EACTL,KAAAM,QAAU,EAEVN,KAAAO,oBAAsB,IACtBP,KAAAQ,cAAgB,IAChBR,KAAAS,eAAiB,EACjBT,KAAAU,EAAY,EACZV,KAAAW,aAAc,EAEdX,KAAAY,gBAAuB,CACnBC,WAAc,mBACdC,UAAa,kBACbC,SAAY,kBAEhBf,KAAAgB,gBAAuB,CACnBC,UAAa,kBACbC,UAAa,kBACbC,QAAW,gBACXC,MAAS,eAEbpB,KAAAqB,gBAAuB,CACnBC,OAAU,gBAqFdtB,KAAAuB,iBAAmB,SAACC,GAChBzB,EAAK0B,gBAAkB1B,EAAK2B,qBAC5B3B,EAAKU,gBAAiB,IAAIkB,MAAOC,eAEV1B,IAAnBH,EAAKE,WACLF,EAAK8B,sBAAsBL,GAG/BzB,EAAK+B,WAAW,aAAcN,IAMlCxB,KAAA+B,gBAAkB,SAACP,GACf,IAAMQ,EAAUR,EAAMQ,QAatB,OAVIjC,EAAKkC,UAAUD,IACfjC,EAAK+B,WAAW,MAAON,GAIvBzB,EAAKmC,YAAYV,IACjBzB,EAAK+B,WAAW,QAASN,GAIrBzB,EAAKoC,kBAAkBX,IAC3B,IAAK,mBACDA,EAAMY,UAAY,mBAClBrC,EAAK+B,WAAW,mBAAoBN,GACpC,MACJ,IAAK,iBACDA,EAAMY,UAAY,iBAClBrC,EAAK+B,WAAW,iBAAkBN,IAKtCzB,EAAKoC,kBAAkBX,IACJ,qBAAnBzB,EAAKE,WACc,mBAAnBF,EAAKE,YAELF,EAAKsC,kBAAkBb,IAyB/BxB,KAAAsC,eAAiB,SAACd,GACd,IAAMQ,EAAUR,EAAMQ,QAGlBjC,EAAKwC,mBACLxC,EAAK+B,WAAW,aAAcN,GAIlCzB,EAAKyC,YAELzC,EAAK+B,WAAW,WAAYN,GAC5BzB,EAAKE,UAAY,WAEb+B,GAA8B,IAAnBA,EAAQS,SACnB1C,EAAKE,eAAYC,EACjBH,EAAKW,EAAI,IAOjBV,KAAA0C,gBAAkB,SAAClB,GACfzB,EAAKY,aAAc,EACnBZ,EAAK0B,gBAAkB1B,EAAK2B,qBAC5B3B,EAAKU,gBAAiB,IAAIkB,MAAOC,eAEV1B,IAAnBH,EAAKE,WACLF,EAAK4C,qBAAqBnB,GAG9BzB,EAAK+B,WAAW,YAAaN,IAMjCxB,KAAA4C,gBAAkB,SAACpB,GAGf,GAAKzB,EAAKY,YAAV,CAQA,OAHAZ,EAAK+B,WAAW,MAAON,GAGfzB,EAAKoC,kBAAkBX,IAC3B,IAAK,mBACDA,EAAMY,UAAY,mBAClBrC,EAAK+B,WAAW,mBAAoBN,GACpC,MACJ,IAAK,iBACDA,EAAMY,UAAY,iBAClBrC,EAAK+B,WAAW,iBAAkBN,IAKtCzB,EAAKoC,kBAAkBX,IACJ,qBAAnBzB,EAAKE,WACc,mBAAnBF,EAAKE,YAELF,EAAKsC,kBAAkBb,KAO/BxB,KAAA6C,cAAgB,SAACrB,GAGbzB,EAAKyC,YAELzC,EAAKY,aAAc,EACnBZ,EAAK+B,WAAW,UAAWN,GAC3BzB,EAAKE,eAAYC,EACjBH,EAAKW,EAAI,GAMbV,KAAA8C,YAAc,SAACtB,GACXzB,EAAK+B,WAAW,QAASN,IAK7BxB,KAAA+C,aAAe,SAACvB,GACZzB,EAAK+B,WAAW,SAAUN,IAvO1BxB,KAAKF,WAAaA,EAClBE,KAAKgD,QAAUhD,KAAKF,WAAWkD,QAC/BhD,KAAKyB,gBAAkBzB,KAAK0B,qBAE5B1B,KAAKiD,qBAAqB,2BAjB9BC,OAAAC,eAAItD,EAAAuD,UAAA,iBAAc,KAAlB,WACI,OAAOpD,KAAKF,WAAWuD,eAAiBrD,KAAKF,WAAWuD,eAAiBrD,KAAKY,iDAGlFsC,OAAAC,eAAItD,EAAAuD,UAAA,iBAAc,KAAlB,WACI,OAAOpD,KAAKF,WAAWwD,eAAiBtD,KAAKF,WAAWwD,eAAiBtD,KAAKgB,iDAGlFkC,OAAAC,eAAItD,EAAAuD,UAAA,iBAAc,KAAlB,WACI,OAAOpD,KAAKF,WAAWyD,eAAiBvD,KAAKF,WAAWyD,eAAiBvD,KAAKqB,iDAWlFxB,EAAAuD,UAAAI,QAAA,WACIxD,KAAKiD,qBAAqB,wBAG9BpD,EAAAuD,UAAAH,qBAAA,SAAqBQ,GACjB,IAAIC,EAYJ,IAAK,IAAIC,KATLD,EAD8B,oBAA9B1D,KAAKF,WAAW4D,UACJR,OAAOU,OAAO5D,KAAKqD,eAAgBrD,KAAKsD,gBAExCtD,KAAK6D,oBAAsB7D,KAAKqD,eAAiBrD,KAAKsD,eAGlEtD,KAAKF,WAAWwB,SAChBoC,EAAYR,OAAOU,OAAOF,EAAW1D,KAAKuD,iBAGzBG,EAAW,CAC5B,IAAMI,EAAwBJ,EAAUC,GAGvB,WAAbA,GACe,qBAAXF,GACAM,OAAOC,iBAAiBL,EAAU3D,KAAK8D,IAAU,GAEtC,wBAAXL,GACAM,OAAOE,oBAAoBN,EAAU3D,KAAK8D,IAAU,IAGpC,YAAbH,GAAuC,cAAbA,GAClB,qBAAXF,GACAS,SAASF,iBAAiBL,EAAU3D,KAAK8D,IAAU,GAExC,wBAAXL,GACAS,SAASD,oBAAoBN,EAAU3D,KAAK8D,IAAU,KAI3C,qBAAXL,GACAzD,KAAKgD,QAAQgB,iBAAiBL,EAAU3D,KAAK8D,IAAU,GAE5C,wBAAXL,GACAzD,KAAKgD,QAAQiB,oBAAoBN,EAAU3D,KAAK8D,IAAU,MAM1EjE,EAAAuD,UAAAe,kBAAA,SAAkBR,EAAkBG,GAChCC,OAAOC,iBAAiBL,EAAU3D,KAAK8D,IAAU,IAGrDjE,EAAAuD,UAAAgB,qBAAA,SAAqBT,EAAkBG,GACnCC,OAAOE,oBAAoBN,EAAU3D,KAAK8D,IAAU,IAyDxDjE,EAAAuD,UAAAf,kBAAA,SAAkBb,GAGdxB,KAAKU,IAEDV,KAAKU,EAAI,IACTV,KAAKC,UAAYD,KAAKqE,mBAAmB7C,IAGtB,qBAAnBxB,KAAKC,WACLD,KAAK8B,WAAW,mBAAoBN,GAGjB,mBAAnBxB,KAAKC,WACLD,KAAK8B,WAAW,iBAAkBN,IAuG1C3B,EAAAuD,UAAAtB,WAAA,SAAWwC,EAAgBC,GACnBvE,KAAKG,SAASmE,IACdtE,KAAKG,SAASmE,GAAWC,IASjC1E,EAAAuD,UAAAnB,UAAA,SAAUD,GACN,OAA0B,IAAnBA,EAAQS,SAAiBzC,KAAKC,WAAgC,QAAnBD,KAAKC,WAG3DJ,EAAAuD,UAAAb,gBAAA,WAAA,IAAAxC,EAAAC,KACI,GAAsBE,MAAlBF,KAAKC,UAAT,CAIA,IAAMuE,GAAc,IAAI7C,MAAOC,UACzB6C,EAAYD,EAAcxE,KAAKM,QAIrC,GAFAoE,aAAa1E,KAAK2E,kBAEdF,EAAYzE,KAAKO,qBAAuBkE,EAAY,EACpD,OAAO,EAEPzE,KAAK2E,iBAAmBC,YAAW,WAC/BF,aAAa3E,EAAK4E,oBACnB3E,KAAKO,qBAEZP,KAAKM,QAAUkE,IAGnB3E,EAAAuD,UAAAZ,UAAA,WACI,GAAsBtC,MAAlBF,KAAKC,UAAT,CAIA,IACMwE,GADc,IAAI9C,MAAOC,UACC5B,KAAKS,eAEjCgE,EAAY,IACRA,EAAYzE,KAAKQ,cACjBR,KAAK8B,WAAW,MAAON,OAEvBxB,KAAK8B,WAAW,UAAWN,UAKvC3B,EAAAuD,UAAAlB,YAAA,SAAYV,GAER,OAA2B,IADXA,EAAMQ,QACNS,aAAmCvC,IAAnBF,KAAKC,WAA+C,UAAnBD,KAAKC,WAG1EJ,EAAAuD,UAAAjB,kBAAA,SAAkBX,GACd,IAAMQ,EAAUR,EAAMQ,QAEtB,GAAIA,GACA,GAAuB,IAAnBA,EAAQS,SAAiBzC,KAAKC,WAAgC,qBAAnBD,KAAKC,WAAuD,mBAAnBD,KAAKC,UACzF,OAAOD,KAAKqE,mBAAmB7C,QAGnC,IAAKxB,KAAKC,WAAgC,qBAAnBD,KAAKC,WAAuD,mBAAnBD,KAAKC,UACjE,OAAOD,KAAKqE,mBAAmB7C,IAK3C3B,EAAAuD,UAAAiB,mBAAA,SAAmB7C,GACf,GAAuB,qBAAnBxB,KAAKC,WAAuD,mBAAnBD,KAAKC,UAAgC,CAC9E,IAAM4E,EAAYC,KAAKC,IAAI/E,KAAKgF,SAAS,EAAGxD,GAASxB,KAAKI,QAG1D,OAAiB,EAFC0E,KAAKC,IAAI/E,KAAKiF,QAAQ,EAAGzD,GAASxB,KAAKK,QAEnCwE,EACX,iBAEA,mBAGX,OAAO7E,KAAKC,WAIpBJ,EAAAuD,UAAA1B,mBAAA,WACI,OAAO1B,KAAKgD,QAAQkC,yBAGxBrF,EAAAuD,UAAAvB,sBAAA,SAAsBL,GAClBxB,KAAKI,OAASoB,EAAMQ,QAAQ,GAAGmD,QAAUnF,KAAKyB,gBAAgB2D,KAC9DpF,KAAKK,OAASmB,EAAMQ,QAAQ,GAAGqD,QAAUrF,KAAKyB,gBAAgB6D,KAGlEzF,EAAAuD,UAAAT,qBAAA,SAAqBnB,GACjBxB,KAAKI,OAASoB,EAAM2D,QAAUnF,KAAKyB,gBAAgB2D,KACnDpF,KAAKK,OAASmB,EAAM6D,QAAUrF,KAAKyB,gBAAgB6D,KAGvDzF,EAAAuD,UAAA4B,SAAA,SAASO,EAAY/D,GACjB,IAAMQ,EAAUR,EAAMQ,QAEtB,OAAIA,EACOA,EAAQuD,GAAOJ,QAAUnF,KAAKyB,gBAAgB2D,KAE9C5D,EAAM2D,QAAUnF,KAAKyB,gBAAgB2D,MAIpDvF,EAAAuD,UAAA6B,QAAA,SAAQM,EAAY/D,GAChB,IAAMQ,EAAUR,EAAMQ,QAEtB,OAAIA,EACOA,EAAQuD,GAAOF,QAAUrF,KAAKyB,gBAAgB6D,IAE9C9D,EAAM6D,QAAUrF,KAAKyB,gBAAgB6D,KAIpDzF,EAAAuD,UAAAS,kBAAA,WACI,IAAI2B,EAAW,4BAA4BC,MAAM,KAKjD,MAAK,iBAAkB1B,QAJd,SAAS2B,GACd,OAAO3B,OAAO4B,WAAWD,GAAOE,QAU7BC,CADK,CAAC,IAAKL,EAASM,KAAK,oBAAqB,SAAU,KAAKA,KAAK,MAM7EjG,EAAAuD,UAAA2C,GAAA,SAAGvE,EAAkBsC,GACbtC,IACAxB,KAAKG,SAASqB,GAASsC,MAlanC,GCXAkC,EAAA,WAgGI,SAAAA,EACYlG,EACAmG,EACAC,EACAC,EACAC,GALZ,IAAArG,EAAAC,KACYA,KAAAF,WAAAA,EACAE,KAAAiG,MAAAA,EACAjG,KAAAkG,MAAAA,EACAlG,KAAAmG,UAAAA,EACAnG,KAAAoG,MAAAA,EA/FZpG,KAAAqG,iBAA2B,EAE3BrG,KAAAsG,YAAsB,EACtBtG,KAAAuG,mBAA6B,EAC7BvG,KAAAwG,WAAgC,OAChCxG,KAAAyG,yBAAmC,EAGnCzG,KAAA0G,mBAAqB,IAqGrB1G,KAAAuB,iBAAmB,SAACC,GAChBzB,EAAKoG,UAAU5E,mBACfxB,EAAKqG,MAAM7E,iBAAiBC,IAGhCxB,KAAA2G,sBAAwB,SAACnF,GACrBzB,EAAKoG,UAAUQ,yBAGnB3G,KAAAsC,eAAiB,SAACd,GACVzB,EAAKD,WAAW8G,WAChB7G,EAAKoG,UAAU7D,kBAEfvC,EAAKoG,UAAU7D,gBAAe,GAC9BvC,EAAKqG,MAAM9D,eAAed,KAsBlCxB,KAAA6G,oBAAsB,WAClB,OAAO9G,EAAKqG,MAAMS,uBAGtB7G,KAAA8G,oBAAsB,WAClB,OAAO/G,EAAKqG,MAAMU,uBArDlB9G,KAAK+G,cAvFT7D,OAAAC,eAAI6C,EAAA5C,UAAA,aAAU,KAAd,WACI,OAAOpD,KAAKkG,MAAMc,4CAGtB9D,OAAAC,eAAI6C,EAAA5C,UAAA,2BAAwB,KAA5B,WACI,GAAIpD,KAAKiH,OAAQ,CACb,IAAID,EAAahH,KAAKkH,kBAA8C,EAA1BlH,KAAKmH,mBAI/C,OAHIH,EAAahH,KAAKiH,OAAOxE,SACzBuE,EAAahH,KAAKiH,OAAOxE,QAEtBuE,EAEP,OAAOhH,KAAKgH,4CAIpB9D,OAAAC,eAAI6C,EAAA5C,UAAA,gBAAa,KAAjB,WACI,OAAOpD,KAAKiH,OAAOxE,OAAUzC,KAAKiH,OAAOxE,OAAS,EAAMzC,KAAKkG,MAAMc,WAAa,mCAGpF9D,OAAAC,eAAI6C,EAAA5C,UAAA,qBAAkB,KAAtB,WACI,OAAIpD,KAAKiH,QAAUjH,KAAKoH,sBACbtC,KAAKuC,OAAOrH,KAAKiH,OAAOxE,OAASzC,KAAKkH,mBAAqB,GAE3DlH,KAAKF,WAAWqH,oDAI/BjE,OAAAC,eAAI6C,EAAA5C,UAAA,wBAAqB,KAAzB,WACI,OAA4C,EAArCpD,KAAKF,WAAWqH,mBAAyBnH,KAAKkH,kBAAoBlH,KAAKiH,OAAOxE,wCAGzFS,OAAAC,eAAI6C,EAAA5C,UAAA,YAAS,KAAb,WACI,OAAIpD,KAAKsH,WACEtH,KAAKkH,kBAA8C,EAA1BlH,KAAKmH,mBAE9BnH,KAAKF,WAAWmH,OAAOxE,wCAItCS,OAAAC,eAAI6C,EAAA5C,UAAA,aAAU,KAAd,WACI,OAAOpD,KAAKF,WAAWyH,UAAYvH,KAAKF,WAAW0H,sCAGvDtE,OAAAC,eAAI6C,EAAA5C,UAAA,SAAM,KAAV,WACI,OAAOpD,KAAKF,WAAWmH,wCAG3B/D,OAAAC,eAAI6C,EAAA5C,UAAA,SAAM,KAAV,WACI,OAAOpD,KAAKF,WAAW2H,wCAG3BvE,OAAAC,eAAI6C,EAAA5C,UAAA,mBAAgB,KAApB,WACI,OAAOpD,KAAKF,WAAW4H,kDAG3BxE,OAAAC,eAAI6C,EAAA5C,UAAA,qBAAkB,KAAtB,WACI,OAAOpD,KAAKF,WAAW6H,oDAG3BzE,OAAAC,eAAI6C,EAAA5C,UAAA,2BAAwB,KAA5B,WACI,OAAOpD,KAAKF,WAAW8H,0DAG3B1E,OAAAC,eAAI6C,EAAA5C,UAAA,gBAAa,KAAjB,WACI,OAAOpD,KAAKF,WAAW+H,UAAY7H,KAAKyH,wCAG5CvE,OAAAC,eAAI6C,EAAA5C,UAAA,oBAAiB,KAArB,WACI,OAAO0B,KAAKgD,KAAK9H,KAAK+H,aAAe/H,KAAKgI,gDAG9C9E,OAAAC,eAAI6C,EAAA5C,UAAA,aAAU,KAAd,WACI,OAAO0B,KAAKuC,MAAMrH,KAAKoG,MAAM6B,QAAUjI,KAAKkI,2DAGhDhF,OAAAC,eAAI6C,EAAA5C,UAAA,eAAY,KAAhB,WACI,OAAOpD,KAAKoG,MAAM6B,yCAatBjC,EAAA5C,UAAA2D,KAAA,WACI/G,KAAKmI,aAAenI,KAAKF,WAAWqI,aACpCnI,KAAK+H,aAAe/H,KAAKF,WAAWiI,cAAgB/H,KAAKmI,aAAaC,cAAcC,aAGxFrC,EAAA5C,UAAAkF,YAAA,WACItI,KAAKkG,MAAMqC,UAqBfvC,EAAA5C,UAAAoF,oBAAA,WACIxI,KAAKoG,MAAMoC,uBAGfxC,EAAA5C,UAAAqF,SAAA,SAASlD,GACL,OAAOvF,KAAKkG,MAAMuC,SAASlD,IAG/BS,EAAA5C,UAAAsF,KAAA,SAAKjG,QAAA,IAAAA,IAAAA,EAAA,GACIzC,KAAK6G,uBACN7G,KAAKoG,MAAMsC,KAAKjG,IAIxBuD,EAAA5C,UAAAuF,KAAA,SAAKlG,QAAA,IAAAA,IAAAA,EAAA,GACDzC,KAAKoG,MAAMuC,KAAKlG,IAWpBuD,EAAA5C,UAAAwF,SAAA,WAAA,IAAA7I,EAAAC,KACIA,KAAK6I,WAAaC,aAAY,WAC1B/I,EAAK2I,SACN1I,KAAKF,WAAWiJ,mBAGvB/C,EAAA5C,UAAA4F,aAAA,WACQhJ,KAAK6I,YACLI,cAAcjJ,KAAK6I,eAvK/B,GCAAK,EAAA,WAuFI,SAAAA,EAAoBC,EACRlD,EACAC,GAFQlG,KAAAmJ,mBAAAA,EACRnJ,KAAAiG,MAAAA,EACAjG,KAAAkG,MAAAA,EArFZlG,KAAAoJ,iBAA2B,EAE3BpJ,KAAAqJ,iBAA2B,EAC3BrJ,KAAAsJ,wBAAkC,EAClCtJ,KAAAuJ,UAAoB,EACpBvJ,KAAAwJ,UAAY,IAkFRxJ,KAAK+G,cA5ET7D,OAAAC,eAAI+F,EAAA9F,UAAA,eAAY,KAAhB,WACI,OAAOpD,KAAKiG,MAAM8B,8CAGtB7E,OAAAC,eAAI+F,EAAA9F,UAAA,qBAAkB,KAAtB,WACI,OAAOpD,KAAKiG,MAAMkB,oDAGtBjE,OAAAC,eAAI+F,EAAA9F,UAAA,SAAM,KAAV,WACI,OAAOpD,KAAKmJ,mBAAmBlC,wCAGnC/D,OAAAC,eAAI+F,EAAA9F,UAAA,UAAO,KAAX,WACI,OAAOpD,KAAKmJ,mBAAmBhB,8CAGnCjF,OAAAC,eAAI+F,EAAA9F,UAAA,aAAU,KAAd,WACI,OAAOpD,KAAKmJ,mBAAmBvC,4CAGnC1D,OAAAC,eAAI+F,EAAA9F,UAAA,gBAAa,KAAjB,WACI,OAAOpD,KAAKmJ,mBAAmBtB,UAAY7H,KAAKmJ,mBAAmB1B,wCAGvEvE,OAAAC,eAAI+F,EAAA9F,UAAA,oBAAiB,KAArB,WACI,OAAO0B,KAAKgD,KAAK9H,KAAK+H,aAAe/H,KAAKgI,gDAG9C9E,OAAAC,eAAI+F,EAAA9F,UAAA,qBAAkB,KAAtB,WACI,OAAOpD,KAAKmJ,mBAAmBxB,oDAGnCzE,OAAAC,eAAI+F,EAAA9F,UAAA,2BAAwB,KAA5B,WACI,OAAOpD,KAAKmJ,mBAAmBvB,0DAGnC1E,OAAAC,eAAI+F,EAAA9F,UAAA,aAAU,KAAd,WACI,OAAIpD,KAAKiH,OACEjH,KAAKiH,OAAOxE,OAEZzC,KAAKkG,MAAMc,4CAI1B9D,OAAAC,eAAI+F,EAAA9F,UAAA,2BAAwB,KAA5B,WACI,GAAIpD,KAAKiH,OAAQ,CACb,IAAID,EAAahH,KAAKkH,kBAA8C,EAA1BlH,KAAKmH,mBAI/C,OAHIH,EAAahH,KAAKiH,OAAOxE,SACzBuE,EAAahH,KAAKiH,OAAOxE,QAEtBuE,EAEP,OAAOhH,KAAKgH,4CAIpB9D,OAAAC,eAAI+F,EAAA9F,UAAA,cAAW,KAAf,WACI,OAAOpD,KAAKkH,kBAAoBlH,KAAKgH,4CAGzC9D,OAAAC,eAAI+F,EAAA9F,UAAA,WAAQ,KAAZ,WACI,OAAOpD,KAAKyJ,6CAGhBvG,OAAAC,eAAI+F,EAAA9F,UAAA,SAAM,KAAV,WACI,OAAOpD,KAAKmJ,mBAAmB1B,wCAGnCvE,OAAAC,eAAI+F,EAAA9F,UAAA,aAAU,KAAd,WACI,OAAOpD,KAAKmJ,mBAAmB5B,UAAYvH,KAAKmJ,mBAAmB3B,sCAUvE0B,EAAA9F,UAAA2D,KAAA,WACI/G,KAAK0J,YAGTR,EAAA9F,UAAA7B,iBAAA,WACIvB,KAAKI,OAASJ,KAAKiG,MAAM0D,UAAUnI,OACnCxB,KAAK4J,WAAY,IAAIjI,MAAOC,UAC5B5B,KAAKsJ,wBAA0BtJ,KAAK6J,8BAGxCX,EAAA9F,UAAAuD,sBAAA,WACQ3G,KAAK8J,WAIJ9J,KAAK+J,oBACN/J,KAAKI,OAASJ,KAAKiG,MAAM0D,UAAUnI,OACnCxB,KAAK4J,WAAY,IAAIjI,MAAOC,UAC5B5B,KAAKsJ,wBAA0BtJ,KAAK6J,8BAGxC7J,KAAK+J,mBAAoB,EACzB/J,KAAKgK,MAAQhK,KAAKiG,MAAMgE,SAASzI,OACjCxB,KAAKkK,SAGThB,EAAA9F,UAAAd,eAAA,SAAe6H,QAAA,IAAAA,IAAAA,GAAA,GACPnK,KAAK8J,WAKLK,EACAnK,KAAK+J,mBAAoB,GAI7B/J,KAAK+J,mBAAoB,EACzB/J,KAAKoK,eACLpK,KAAKqK,wBAGTnB,EAAA9F,UAAA8G,KAAA,WACI,IAAII,EAAYtK,KAAKuK,mBACfC,EAAWxK,KAAKyK,eAChBC,EAAY1K,KAAK2K,eAEnBH,IACsB,SAAlBA,EAASI,MAAiC,UAAdF,GACV,UAAlBF,EAASI,MAAkC,SAAdF,KAC7BJ,EAAYtK,KAAK6K,eAAeP,IAIxCtK,KAAK8K,mBAAmBR,EAAW,GAE/BtK,KAAK4G,aACL5G,KAAKqJ,iBAAmBiB,GAGxBE,IACsB,SAAlBA,EAASI,MAAmBJ,EAASO,UAAY/K,KAAKwJ,YACtDxJ,KAAKqJ,iBAAmB,GAEN,UAAlBmB,EAASI,MAAoBJ,EAASO,UAAY/K,KAAKwJ,YACvDxJ,KAAKqJ,iBAAmBiB,KAKpCpB,EAAA9F,UAAAmH,iBAAA,WACI,IAAMS,EAAWhL,KAAKiL,cACtB,OAAOjL,KAAKsJ,wBAA0B0B,GAG1C9B,EAAA9F,UAAA6H,YAAA,WACI,OAAOjL,KAAKI,OAASJ,KAAKgK,OAI9Bd,EAAA9F,UAAAqH,aAAA,WACI,IAAMS,EAAmBlL,KAAKmL,sBAE9B,OAAID,EAAmB,EACZ,CACHN,KAAM,OACNN,UAAWY,EACXH,UAAWjG,KAAKC,IAAImG,IAIxBA,EAAmBlL,KAAKoL,iBACjB,CACHR,KAAM,QACNN,UAAWY,EACXH,UAAWjG,KAAKC,IAAImG,EAAmBlL,KAAKoL,wBAJpD,GASJlC,EAAA9F,UAAAyH,eAAA,SAAeQ,GACX,IAIIf,EAJAU,EAAWlG,KAAKC,IAAI/E,KAAKiL,eACvBK,EAActL,KAAKoL,iBACnBZ,EAAWxK,KAAKyK,eAChBc,EAAoB,EAAIf,EAASO,UAAY,GAG7B,SAAlBP,EAASI,OAEL5K,KAAKsJ,wBAA0B,IAC/B0B,GAAsBlG,KAAKC,IAAI/E,KAAKsJ,0BAIxCgB,EADMkB,EAAkBR,EAAWO,EAG/BvL,KAAKsJ,wBAA0B,IAC/BgB,EAAYtK,KAAKsJ,wBAA0BkC,GAG3ClB,EAAYtK,KAAKwJ,YACjBc,EAAYtK,KAAKwJ,YAIzB,GAAsB,UAAlBgB,EAASI,KAAkB,CAC3B,IAAMY,EAAkBF,GAAiBtL,KAAKsJ,wBAA0B0B,EAAYM,GAAeC,EAC7FE,EAAiBzL,KAAK0L,WAE5BpB,EAAYkB,EAERxL,KAAKsJ,0BAA4BmC,EAAiBzL,KAAK+H,gBACvDuC,EAAcmB,EAAiBzL,KAAK+H,aAAgB/H,KAAKsJ,wBAA2BkC,GAGpFlB,EAAYgB,EAActL,KAAKwJ,YAC/Bc,EAAYgB,EAActL,KAAKwJ,WAIvC,OAAOc,GAGXpB,EAAA9F,UAAAgH,aAAA,WACI,IACIuB,EADErB,EAAYtK,KAAKuK,mBAGnBvK,KAAK4G,aACL+E,EAAe3L,KAAK4L,cAIxBD,EAAe3L,KAAK6L,yBAAyBF,GAE7C3L,KAAK8K,mBAAmBa,GACxB3L,KAAK8L,mBAAmBxB,IAI5BpB,EAAA9F,UAAAwI,WAAA,WACI,IAGIG,EAHa/L,KAAKiL,gBACF,IAAItJ,MAAOC,UACC5B,KAAK4J,WACE,IAEvC,OAAO5J,KAAKqJ,iBAAmB0C,GAGnC7C,EAAA9F,UAAAyI,yBAAA,SAAyBF,GACrB,IAAMjB,EAAY1K,KAAK2K,eAEvB,GAAkB,SAAdD,EAAsB,CACtB,IAAIY,EAActL,KAAKoL,iBACvB,GAAIO,EAAeL,EACf,OAAOA,EAGf,MAAkB,UAAdZ,GACIiB,EAAe,EACR,EAIRA,GAGXzC,EAAA9F,UAAA+H,oBAAA,WACI,IAAMa,EAAiBhM,KAAKgD,QAAQoF,cAAclD,wBAElD,OADiBlF,KAAKgD,QAAQkC,wBACdE,KAAO4G,EAAe5G,MAG1C8D,EAAA9F,UAAAgI,eAAA,WACI,GAAIpL,KAAKsH,WAEL,QADwBtH,KAAKkG,MAAM+F,WAAWC,YACnBzJ,OAASzC,KAAKgI,cAAgBhI,KAAK+H,aAAe/H,KAAKyH,QAElF,IAAM0E,EAAQnM,KAAK0L,WAEnB,OADqB1L,KAAKgD,QAAQoF,cAAcC,YAC1B8D,GAI9BjD,EAAA9F,UAAA0H,mBAAA,SAAmBsB,EAAOC,QAAA,IAAAA,IAAAA,EAAWrM,KAAK2H,yBACxBzH,IAAVkM,IAIJpM,KAAKgD,QAAQsJ,MAAMC,WAAa,aAAeF,EAAW,MAAQrM,KAAK4H,yBACvE5H,KAAKgD,QAAQsJ,MAAME,UAAY,cAAgBJ,EAAQ,QAG3DlD,EAAA9F,UAAAsI,SAAA,WACI,IAAIS,EAAQnM,KAAKkI,yBAA2BlI,KAAKgI,cAC7CyE,EAAkBzM,KAAKgH,WAAahH,KAAKgI,cAM7C,OAJIyE,EAAkBN,IAClBA,EAAQM,GAGLzM,KAAKsH,WAAa6E,EAAQM,GAGrCvD,EAAA9F,UAAAsG,SAAA,WACI,IAAMyC,EAAQnM,KAAK0L,WACnB1L,KAAKgD,QAAQsJ,MAAMH,MAAQA,EAAQ,MAGvCjD,EAAA9F,UAAA0I,mBAAA,SAAmBY,GACf1M,KAAKqJ,iBAAmBqD,GAG5BxD,EAAA9F,UAAA1B,mBAAA,WACI,OAAO1B,KAAKgD,QAAQkC,yBAGxBgE,EAAA9F,UAAAyG,2BAAA,WACI,IAAM8C,EAA0B3M,KAAKiG,MAAM2G,6BAAmC,KAC9E,OAAO5M,KAAK0B,qBAA2B,KAAIiL,GAG/CzD,EAAA9F,UAAAiH,mBAAA,WACIrK,KAAKI,OAASJ,KAAKgK,WAAQ9J,GAG/BgJ,EAAA9F,UAAAuH,aAAA,WACI,IAAMD,EAAY5F,KAAK+H,KAAK7M,KAAKI,OAASJ,KAAKgK,OAE/C,OAAmB,IAAfU,EACO,QAEO,IAAdA,EACO,YADX,KAzVR,GCAAoC,EAAA,WAKI,SAAAA,EAAY9J,GACRhD,KAAKgD,QAAUA,SAGnB8J,EAAA1J,UAAA8I,UAAA,WACI,OAAOlM,KAAK+M,UAAUC,OAAOhN,KAAKgN,SAGtCF,EAAA1J,UAAA6J,iBAAA,SAAiBC,EAAGC,GAChB,OAAID,EAAE5C,UAAY6C,EAAE7C,WACR,EAER4C,EAAE5C,UAAY6C,EAAE7C,UACT,EAEJ,GAGXwC,EAAA1J,UAAA4J,OAAA,SAAOI,GACH,YAAoBlN,IAAbkN,EAAKC,OAxBpB,GA4BAC,EAAA,WA2CI,SAAAA,EAAoBnE,EACRlD,GADQjG,KAAAmJ,mBAAAA,EACRnJ,KAAAiG,MAAAA,EAxCZjG,KAAAiI,QAAkB,EA0CdjI,KAAKiM,WAAa,IAAIa,EAAW9M,KAAKgD,SACtChD,KAAK+G,KAAKoC,UAxCdjG,OAAAC,eAAImK,EAAAlK,UAAA,SAAM,KAAV,WACI,OAAOpD,KAAKmJ,mBAAmBlC,wCAGnC/D,OAAAC,eAAImK,EAAAlK,UAAA,aAAU,KAAd,WACI,OAAOpD,KAAKkG,MAAMzD,wCAGtBS,OAAAC,eAAImK,EAAAlK,UAAA,gBAAa,KAAjB,WACI,OAAOpD,KAAKmJ,mBAAmBtB,UAAY7H,KAAKmJ,mBAAmB1B,wCAGvEvE,OAAAC,eAAImK,EAAAlK,UAAA,2BAAwB,KAA5B,WACI,GAAIpD,KAAKiH,OAAQ,CACb,IAAID,EAAahH,KAAKkH,kBAAoD,EAAhClH,KAAKiG,MAAMkB,mBAIrD,OAHIH,EAAahH,KAAKiH,OAAOxE,SACzBuE,EAAahH,KAAKiH,OAAOxE,QAEtBuE,EAEP,OAAOhH,KAAKgH,4CAIpB9D,OAAAC,eAAImK,EAAAlK,UAAA,oBAAiB,KAArB,WACI,OAAO0B,KAAKgD,KAAK9H,KAAK+H,aAAe/H,KAAKgI,gDAG9C9E,OAAAC,eAAImK,EAAAlK,UAAA,qBAAkB,KAAtB,WACI,OAAOpD,KAAKmJ,mBAAmBhC,oDAGnCjE,OAAAC,eAAImK,EAAAlK,UAAA,aAAU,KAAd,WACI,OAAOpD,KAAKmJ,mBAAmB5B,UAAYvH,KAAKmJ,mBAAmB3B,sCAUvE8F,EAAAlK,UAAAmF,OAAA,WACI,IAAMrC,EAAQlG,KAAKgD,QAAQuK,SAC3BvN,KAAKiM,WAAWc,UAAY,GAE5B,IAAK,IAAIrM,EAAI,EAAGA,EAAIwF,EAAMzD,OAAQ/B,IAAK,CACnC,IAAI0M,EAAOlH,EAAMxF,GACb4J,EAAYtK,KAAKwN,2BAA2B9M,GAC/C0M,EAAqBd,MAAME,UAAY,cAAgBlC,EAAY,MACnE8C,EAAqBd,MAAMH,MAAQnM,KAAKmJ,mBAAmBtB,UAAY,KAEpE7H,KAAKyI,SAAS/H,IACdV,KAAKiM,WAAWc,UAAUU,KAAK,CAC3BlI,MAAO7E,EACP4J,UAASA,EACT+C,IAAKrN,KAAKyI,SAAS/H,GAAU,UAM7C4M,EAAAlK,UAAAsK,2BAAA,WAEI,MAAuC,oBADzB1N,KAAKgD,QAAQuK,SACd,GAAU,MAAEf,WAG7Bc,EAAAlK,UAAAoK,2BAAA,SAA2BG,GAEvB,OADoB3N,KAAK4N,wBAAwBD,GAC1B3N,KAAKgI,eAGhCsF,EAAAlK,UAAAwK,wBAAA,SAAwBD,GACpB,IAAIE,EAEJ,IAAK7N,KAAKsH,WACN,OAAOqG,EAGX,IAAI3G,EAAahH,KAAKkI,yBAClBD,EAAUjI,KAAKiI,QAAUjI,KAAKmJ,mBAAmBhC,mBAMrD,OAJIc,EAAUjB,IACViB,GAAoBjB,GAGpBiB,EAAU,EACH0F,IAEPE,EAAgBF,EAAqB1F,GACjB,IAChB4F,EAAgB7G,EAAa6G,GAI9BA,IAGXP,EAAAlK,UAAAqF,SAAA,SAASqF,GACL,GAAK9N,KAAKiH,OAAV,CAIA,IAAI8G,EAAa/N,KAAKgO,cAAcF,GAChCG,EAAOjO,KAAKiH,OAAO8G,GAMvB,OAJIE,IAASA,EAAKC,OACdD,EAAKC,KAAO,SAGT,CACHC,MAAOnO,KAAKiH,OAAO8G,GACnBA,WAAUA,KAIlBT,EAAAlK,UAAA4K,cAAA,SAAcL,GACV,IACII,EADEF,EAAgB7N,KAAK4N,wBAAwBD,GAE/CxG,EAAqBnH,KAAKmJ,mBAAmBhC,mBAE7CnH,KAAKiI,QAAUd,GAEf4G,EAAaF,GADW7N,KAAKiI,QAAUd,GAGnCnH,KAAKiH,QAAUjH,KAAKmJ,mBAAmB3B,OACvCuG,GAA0B/N,KAAKiH,OAAOxE,SAG1CsL,EAAaJ,EAGjB,OAAOI,GAGXT,EAAAlK,UAAAgL,WAAA,SAAWhC,GACPpM,KAAKiI,QAAUmE,GAGnBkB,EAAAlK,UAAA2D,KAAA,SAAKoC,GACDnJ,KAAKgD,QAAUhD,KAAKmJ,mBAAmBhB,aACvCnI,KAAKkG,MAAQlG,KAAKgD,QAAQuK,SAC1BvN,KAAK+H,aAAe/H,KAAKmJ,mBAAmBpB,cAAgB/H,KAAKgD,QAAQoF,cAAcC,eAtJ/F,GCxBAgG,EAAA,WAmEI,SAAAA,EAAoBlF,EACRlD,EACAC,EACAC,GAHQnG,KAAAmJ,mBAAAA,EACRnJ,KAAAiG,MAAAA,EACAjG,KAAAkG,MAAAA,EACAlG,KAAAmG,UAAAA,EAlEZnG,KAAAiI,QAAkB,EAClBjI,KAAAsO,SAAmB,EAKnBtO,KAAAqJ,iBAA2B,EAC3BrJ,KAAAkL,iBAA2B,EA6DvBlL,KAAK+G,cAxDT7D,OAAAC,eAAIkL,EAAAjL,UAAA,gBAAa,KAAjB,WACI,OAAOpD,KAAKmJ,mBAAmBtB,UAAY7H,KAAKmJ,mBAAmB1B,wCAGvEvE,OAAAC,eAAIkL,EAAAjL,UAAA,SAAM,KAAV,WACI,OAAOpD,KAAKmJ,mBAAmB1B,wCAGnCvE,OAAAC,eAAIkL,EAAAjL,UAAA,mBAAgB,KAApB,WACI,OAAOpD,KAAKmJ,mBAAmBzB,kDAGnCxE,OAAAC,eAAIkL,EAAAjL,UAAA,oBAAiB,KAArB,WACI,OAAO0B,KAAKgD,KAAK9H,KAAK+H,aAAe/H,KAAKgI,gDAG9C9E,OAAAC,eAAIkL,EAAAjL,UAAA,gCAA6B,KAAjC,WACI,OAAQpD,KAAKkH,kBAAoBlH,KAAKgI,cAAgBhI,KAAKyH,OAAUzH,KAAK+H,8CAM9E7E,OAAAC,eAAIkL,EAAAjL,UAAA,yBAAsB,KAA1B,WACI,OAASpD,KAAKmH,mBAAqBnH,KAAKgI,+CAG5C9E,OAAAC,eAAIkL,EAAAjL,UAAA,qBAAkB,KAAtB,WACI,OAAOpD,KAAKmJ,mBAAmBhC,oDAGnCjE,OAAAC,eAAIkL,EAAAjL,UAAA,SAAM,KAAV,WACI,OAAOpD,KAAKmJ,mBAAmBlC,wCAGnC/D,OAAAC,eAAIkL,EAAAjL,UAAA,aAAU,KAAd,WACI,OAAIpD,KAAKsH,WACEtH,KAAKkG,MAAMgC,yBAEdlI,KAAKiH,OACEjH,KAAKiH,OAAOxE,OAEZzC,KAAKkG,MAAMc,4CAK9B9D,OAAAC,eAAIkL,EAAAjL,UAAA,aAAU,KAAd,WACI,OAAOpD,KAAKmJ,mBAAmB5B,UAAYvH,KAAKmJ,mBAAmB3B,sCAWvE6G,EAAAjL,UAAA2D,KAAA,WACI/G,KAAK+H,aAAe/H,KAAKmJ,mBAAmBpB,cAAgB/H,KAAKmJ,mBAAmBoF,YAAYlG,aAGpGgG,EAAAjL,UAAA7B,iBAAA,SAAiBC,GAEbxB,KAAKwO,mBAAoB,EACzBxO,KAAKyO,0BAAuBvO,EAEvBF,KAAK0O,oBACN1O,KAAKqJ,iBAAmBrJ,KAAKmG,UAAUgF,wBAI/CkD,EAAAjL,UAAAd,eAAA,SAAed,GACNxB,KAAKwO,oBAGVxO,KAAKkL,iBAAmBlL,KAAKmG,UAAUgF,sBACvCnL,KAAK2O,YAAc7J,KAAKC,IAAI/E,KAAKqJ,iBAAmBrJ,KAAKkL,kBACzDlL,KAAKgL,SAAWhL,KAAKqJ,iBAAmBrJ,KAAKkL,iBAC7ClL,KAAK0K,UAAY1K,KAAK2K,eACtB3K,KAAKwO,uBAAoBtO,EACzBF,KAAK4O,gBAGTP,EAAAjL,UAAAoF,oBAAA,WACIxI,KAAKoO,aACLpO,KAAK0O,mBAAoB,EAErB1O,KAAKsH,YACLtH,KAAK6O,sBAIbR,EAAAjL,UAAA0L,mBAAA,SAAmBtN,GACf,OAAOA,EAAMuN,OAAOC,UAAUC,SAAS,mBAG3CZ,EAAAjL,UAAAwL,YAAA,SAAYM,GACR,IACIvD,EAEJ,QAJQ,IAAAuD,IAAAA,OAAAhP,KACYgP,GAGClP,KAAK0O,oBAAsB1O,KAAK0K,WAArD,CAkBA,GAbIwE,GACAlP,KAAKmP,YAAcnP,KAAKoP,iBAAiBF,GAEpClP,KAAK0O,oBACN1O,KAAKqJ,iBAAmBrJ,KAAKmG,UAAUgF,wBAG3CnL,KAAKmP,YAAcnP,KAAKqP,eAAerP,KAAK2O,aAIhD3O,KAAKsO,SAAWtO,KAAKsP,wBAEE,SAAnBtP,KAAK0K,UAAsB,CACtBwE,IACDlP,KAAKmP,YAAcnP,KAAKoP,iBAAiBpP,KAAKqP,eAAerP,KAAK2O,eAGtE3O,KAAKsO,SAAWtO,KAAKsP,wBACrB,IAAIC,EAAcvP,KAAKuP,YAAYvP,KAAKsO,UACxC3C,EAAe3L,KAAKwP,mBAAmBxP,KAAKsO,UAExCiB,IACAvP,KAAKsO,SAAWtO,KAAKiI,QAErB0D,EAAe3L,KAAKwP,mBAAmBxP,KAAKiI,SAC5CjI,KAAKmP,YAAc,GAIJ,UAAnBnP,KAAK0K,YACAwE,IACDlP,KAAKmP,YAAcnP,KAAKqP,eAAerP,KAAK2O,cAG5C3O,KAAKsO,SAAW,IAChBtO,KAAKsO,SAAWtO,KAAKiI,QACrBjI,KAAKmP,YAAcnP,KAAKiI,SAG5B0D,EAAe3L,KAAKwP,mBAAmBxP,KAAKiI,QAAUjI,KAAKmP,cAG3DnP,KAAKmG,UAAUgF,wBAA0BQ,IACzC3L,KAAK0O,mBAAoB,EACzB1O,KAAKmG,UAAU2E,mBAAmBa,MAI1C0C,EAAAjL,UAAAsF,KAAA,SAAKjG,QAAA,IAAAA,IAAAA,EAAA,GACDzC,KAAK0K,UAAY,OACjB1K,KAAK4O,YAAYnM,IAGrB4L,EAAAjL,UAAAuF,KAAA,SAAKlG,QAAA,IAAAA,IAAAA,EAAA,GACDzC,KAAK0K,UAAY,QACjB1K,KAAK4O,YAAYnM,IAGrB4L,EAAAjL,UAAAqM,OAAA,SAAOlK,GACH,KAAIA,EAAQvF,KAAKgH,WAAa,GAA9B,CAIA,GAAIzB,EAAQvF,KAAKiI,QAAS,CACtB,IAAIxF,EAAS8C,EAAQvF,KAAKiI,QAC1BjI,KAAK0I,KAAKjG,GAGd,GAAI8C,EAAQvF,KAAKiI,QAAS,CAClBxF,EAASzC,KAAKiI,QAAU1C,EAC5BvF,KAAK2I,KAAKlG,MAIlB4L,EAAAjL,UAAAkM,sBAAA,WACI,MAAuB,SAAnBtP,KAAK0K,UACE1K,KAAKiI,QAAUjI,KAAKmP,YAGR,UAAnBnP,KAAK0K,UACE1K,KAAKiI,QAAUjI,KAAKmP,iBAD/B,GASJd,EAAAjL,UAAAgM,iBAAA,SAAiBD,GACb,GAAIA,EAAc,EACd,IAAK,IAAIzO,EAAI,EAAGA,EAAIyO,EAAazO,IAAK,CAClC,IAAIgP,EAAa1P,KAAKiI,SAAWkH,EAAczO,GAE/C,IAAKV,KAAKuP,YAAYG,GAAa,CAC/BP,GAA4BzO,EAC5BV,KAAKyO,qBAAuB/N,EAAI,EAChC,OAIZ,OAAOyO,GAIXd,EAAAjL,UAAAuM,sBAAA,SAAsB1H,GAClB,IAAI2H,EAAa,EACbC,EAAc7P,KAAK6P,YAAY5H,GAEnC,GAAIjI,KAAKmJ,mBAAmB3B,MAA2B,UAAnBxH,KAAK0K,UACrC,OAAO,EAGX,GAAI1K,KAAKyO,sBAAwBoB,EAAa,CAC1C,IAAIC,EAAa9P,KAAKkG,MAAMgC,yBAA2BlI,KAAKgI,cAExDhI,KAAK+H,aAAe+H,IACpBF,IAAe5P,KAAKkH,kBAAoBlH,KAAKgI,cAAgBhI,KAAK+H,aAAe/H,KAAKyH,SAGtFmI,IAAe5P,KAAKyH,SACpBmI,EAAa,GAIrB,OAAOA,GAGXvB,EAAAjL,UAAAiM,eAAA,SAAeV,GACO3O,KAAK6P,YAAY7P,KAAKiI,UAMF,UAAnBjI,KAAK0K,YACpBiE,GAA4B3O,KAAK+H,aAAe/H,KAAKgI,eAGzD,IAAIvF,EAASqC,KAAKuC,MAAMsH,EAAc3O,KAAKgI,eAM3C,OAJI2G,EAAc3O,KAAKgI,eAAiBhI,KAAK0H,kBACzCjF,IAGGA,GAGX4L,EAAAjL,UAAA2M,eAAA,WACI,OAAOjL,KAAKC,IAAI/E,KAAKqJ,iBAAmBrJ,KAAKkL,mBAGjDmD,EAAAjL,UAAAuH,aAAA,WACI,IAAMD,EAAY5F,KAAK+H,KAAK7M,KAAKqJ,iBAAmBrJ,KAAKkL,kBAEzD,OAAmB,IAAfR,EACO,QAEO,IAAdA,EACO,YADX,GAKJ2D,EAAAjL,UAAAmM,YAAA,SAAYtH,GACR,IAAIR,EAASzH,KAAKgQ,8BAAgC,EAAI,EAClDC,EAAcjQ,KAAKiH,OAASjH,KAAKiH,OAAOxE,OAASzC,KAAKkG,MAAMc,WAEhE,OAAIhH,KAAKmJ,mBAAmB3B,MAGhByI,EAAchI,EAAUR,EAAUzH,KAAKkH,mBAIvDmH,EAAAjL,UAAAyM,YAAA,SAAY5H,GACR,OAAOjI,KAAKuP,YAAYtH,EAAU,IAGtCoG,EAAAjL,UAAAgL,WAAA,WAC2B,SAAnBpO,KAAK0K,YACL1K,KAAKiI,QAAUjI,KAAKiI,QAAUjI,KAAKmP,aAGhB,UAAnBnP,KAAK0K,YACL1K,KAAKiI,QAAUjI,KAAKiI,QAAUjI,KAAKmP,cAI3Cd,EAAAjL,UAAAoM,mBAAA,SAAmBlB,GACf,IACI5B,EADAkD,EAAa5P,KAAK2P,sBAAsB3P,KAAKiI,QAAUjI,KAAKmP,cAG7C,IAAfS,IACAA,GAA0B5P,KAAKgI,eAGZ,UAAnBhI,KAAK0K,YACLkF,EAAa,GAGb5P,KAAKsH,YAActH,KAAKkQ,eAAe5B,IACvCtO,KAAKsH,YAActH,KAAKmQ,mBAAmB7B,IAI3C5B,EAFsB1M,KAAKoQ,6BAA6BpQ,KAAKqJ,oBACrCiF,EAAWtO,KAAKiI,SACWjI,KAAKgI,cAAiB4H,GAEzElD,IAAc4B,EAAWtO,KAAKgI,cAAiB4H,GAKnD,OAFAlD,EAAW1M,KAAKqQ,oBAAoB3D,IAKxC2B,EAAAjL,UAAAiN,oBAAA,SAAoB3D,GAChB,IAAMpB,EAActL,KAAKmG,UAAUiF,iBAcnC,MAZuB,SAAnBpL,KAAK0K,WACDgC,EAAW,IACXA,EAAW,GAII,UAAnB1M,KAAK0K,WACDgC,EAAWpB,IACXoB,EAAWpB,GAIZoB,GAGX2B,EAAAjL,UAAAgN,6BAAA,SAA6BhE,GACzB,IAAIkE,EAAYlE,EAAQpM,KAAKgI,cAE7B,OAAkB,IAAdsI,EACOlE,GAASpM,KAAKgI,cAAgBsI,GAE9BlE,GAIfiC,EAAAjL,UAAAyD,oBAAA,WACI,OAAO7G,KAAK6P,YAAY7P,KAAKiI,UAGjCoG,EAAAjL,UAAA0D,oBAAA,WACI,OAAwB,IAAjB9G,KAAKiI,SAGhBoG,EAAAjL,UAAAyL,mBAAA,WACI,GAAI7O,KAAKkQ,eAAelQ,KAAKiI,SAAU,CACnC,IAAIqC,EAAYtK,KAAKuQ,uBACrBvQ,KAAKmG,UAAU2E,mBAAmBR,EAAW,GAE7CtK,KAAKkG,MAAMkI,WAAWpO,KAAKiI,SAC3BjI,KAAKkG,MAAMqC,cACR,GAAIvI,KAAKwQ,yBAAyBxQ,KAAKiI,UAI1C,GAAIjI,KAAKkG,MAAMwH,6BAA8B,CACrCpD,GAActK,KAAKiI,QAAUjI,KAAKgI,cACtChI,KAAKmG,UAAU2E,mBAAmBR,EAAW,GAE7CtK,KAAKkG,MAAMkI,WAAWpO,KAAKiI,SAC3BjI,KAAKkG,MAAMqC,eAEZ,GAAIvI,KAAKmQ,mBAAmBnQ,KAAKiI,SAAU,CAC9C,IAAIwI,EAAqBzQ,KAAKmG,UAAUgF,sBACpCM,EAAiBzL,KAAKmG,UAAUuF,WAGpC,GAFA1L,KAAK+H,aAED/H,KAAK6P,YAAY7P,KAAKiI,UACtBwD,EAAiBgF,GAAsBzQ,KAAK+H,aAC5C,OAGJ,IAAI6H,EAAa5P,KAAK2P,sBAAsB3P,KAAKiI,SAE9B,IAAf2H,IACAA,GAA0B5P,KAAKgI,eAGZ,UAAnBhI,KAAK0K,YACLkF,EAAa,GAGbtF,EAAYtK,KAAKuQ,uBAAyBX,EAE9C5P,KAAKmG,UAAU2E,mBAAmBR,EAAW,GAC7CtK,KAAKkG,MAAMkI,WAAWpO,KAAKiI,SAC3BjI,KAAKkG,MAAMqC,WAInB8F,EAAAjL,UAAA8M,eAAA,SAAejI,GACX,IAAIyI,EACAC,EAAmB3Q,KAAKiH,OAAOxE,OAASzC,KAAKmH,mBAAqBnH,KAAKkH,kBAE3E,QAAKlH,KAAKsH,aAINW,EAAUjI,KAAKmH,oBAAyC,SAAnBnH,KAAK0K,WAC1CzC,GAAW0I,IACXD,GAAO,GAGPzI,GAAWjI,KAAKmH,oBAAyC,UAAnBnH,KAAK0K,WAC3CzC,EAAU0I,IACVD,GAAO,GAGP1Q,KAAKiI,QAAUjI,KAAKmH,oBAAyC,SAAnBnH,KAAK0K,WAC/C1K,KAAKiI,SAAW0I,IAChBD,GAAO,GAGP1Q,KAAKiI,SAAWjI,KAAKmH,oBAAyC,UAAnBnH,KAAK0K,WAChD1K,KAAKiI,QAAU0I,IACfD,GAAO,GAGJA,IAGXrC,EAAAjL,UAAA+M,mBAAA,SAAmBlI,GACf,IAAIyI,EACAC,EAAmB3Q,KAAKiH,OAAOxE,OAASzC,KAAKmH,mBAAqBnH,KAAKkH,kBAU3E,OARIe,GAAW0I,IACXD,GAAO,GAGP1Q,KAAKiI,SAAW0I,IAChBD,GAAO,GAGJA,GAGXrC,EAAAjL,UAAAoN,yBAAA,SAAyBvI,GACrB,IAAIyI,EAUJ,OARIzI,GAAWjI,KAAKmH,qBAChBuJ,GAAO,GAGP1Q,KAAKiI,SAAWjI,KAAKmH,qBACrBuJ,GAAO,GAGJA,KA7df,GCJAE,EAAA,WA8BI,SAAAA,EAAoBzH,GAAAnJ,KAAAmJ,mBAAAA,SA5BpBjG,OAAAC,eAAIyN,EAAAxN,UAAA,SAAM,KAAV,WACI,OAAOpD,KAAKmJ,mBAAmBlC,wCAGnC/D,OAAAC,eAAIyN,EAAAxN,UAAA,qBAAkB,KAAtB,WACI,OAAIpD,KAAKiH,QAAUjH,KAAKoH,sBACbtC,KAAKuC,OAAOrH,KAAKiH,OAAOxE,OAASzC,KAAKkH,mBAAqB,GAE3DlH,KAAKmJ,mBAAmBhC,oDAIvCjE,OAAAC,eAAIyN,EAAAxN,UAAA,wBAAqB,KAAzB,WACI,OAAoD,EAA7CpD,KAAKmJ,mBAAmBhC,mBAAyBnH,KAAKkH,kBAAoBlH,KAAKiH,OAAOxE,wCAGjGS,OAAAC,eAAIyN,EAAAxN,UAAA,oBAAiB,KAArB,WACI,OAAO0B,KAAKgD,KAAK9H,KAAK+H,aAAe/H,KAAKgI,gDAG9C9E,OAAAC,eAAIyN,EAAAxN,UAAA,gBAAa,KAAjB,WACI,OAAOpD,KAAKmJ,mBAAmBtB,UAAY7H,KAAKmJ,mBAAmB1B,wCAGvEvE,OAAAC,eAAIyN,EAAAxN,UAAA,eAAY,KAAhB,WACI,OAAOpD,KAAKmJ,mBAAmBpB,cAAgB/H,KAAKmJ,mBAAmBhB,aAAaC,cAAcC,6CAOtGuI,EAAAxN,UAAAuG,UAAA,SAAUnI,GACN,IAAMQ,EAAUR,EAAMQ,QAChB2K,EAA0B3M,KAAK4M,6BAAmC,KASxE,OANI5K,EACSA,EAAQ,GAAGmD,QAAUwH,EAErBnL,EAAM2D,QAAUwH,GAMjCiE,EAAAxN,UAAA6G,SAAA,SAASzI,GACL,IAAMQ,EAAUR,EAAMQ,QAChB6O,EAA2B7Q,KAAK4M,6BAAmC,KAEzE,OAAI5K,EACOA,EAAQ,GAAGmD,QAAU0L,EAErBrP,EAAM2D,QAAU0L,GAI/BD,EAAAxN,UAAAwJ,2BAAA,WACI,OAAO5M,KAAKmJ,mBAAmBoF,YAAYrJ,2BA5DnD,gBCmMI,SAAA4L,EACYC,EACAC,GAFZ,IAAAjR,EAAAC,KACYA,KAAA+Q,WAAAA,EACA/Q,KAAAgR,IAAAA,EA5KZhR,KAAAiR,WAAa,GAIbjR,KAAAkR,WAA8B,IAC9BlR,KAAAmR,OAAiB,EACjBnR,KAAAoR,WAAqB,EA+DXpR,KAAAqR,OAA+B,IAAIC,EAAAA,aAGpCtR,KAAAuR,OAAiB,IAEjBvR,KAAA4I,UAAoB,EACpB5I,KAAA+I,iBAA2B,IAC3B/I,KAAAwR,cAAwB,EACxBxR,KAAAyR,MAAgB,EAEhBzR,KAAAyH,OAAiB,GACjBzH,KAAA0R,UAA0C,QAC1C1R,KAAA0H,iBAA2B,GAC3B1H,KAAA2H,mBAA6B,IAC7B3H,KAAA4H,yBAAuF,WAEvF5H,KAAA2R,iBAA2B,MAC3B3R,KAAAmH,mBAA6B,EAC7BnH,KAAA0D,UAAwC,kBAExC1D,KAAA4R,cAAwB,EACxB5R,KAAA4G,YAAsB,EACtB5G,KAAA6R,QAAkB,EAElB7R,KAAA8R,YAAgC,QAkDV9R,KAAA+R,mBAA6B,EA6I5D/R,KAAAuB,iBAAmB,SAACC,GAEhBzB,EAAKiC,QAAQmC,kBAAkB,YAAa,mBAC5CpE,EAAKiS,SAASzQ,iBAAiBC,GAC/BzB,EAAKkS,UAAW,GAGpBjS,KAAA2G,sBAAwB,SAACnF,GACrBA,EAAM0Q,iBACNnS,EAAKiS,SAASrL,sBAAsBnF,IAGxCxB,KAAAsC,eAAiB,SAACd,GACEA,EAAMQ,QACtBjC,EAAKiS,SAAS1P,eAAed,GAC7BzB,EAAKiC,QAAQoC,qBAAqB,YAAa,mBAC/CrE,EAAKkS,UAAW,GAGpBjS,KAAAmS,UAAY,SAAC3Q,GACT,IAGI4Q,EAAQC,MAAMjP,UAAUkP,MAAMC,KAAKxS,EAAKoI,aAAaoF,UACrDiF,EAAchR,EAAMiR,WAAWC,QAAQ,kBACjCN,EAAMO,QAAQH,GACNJ,EAAMO,QAAQH,GAE5BzS,EAAKkH,eA5Sb/D,OAAAC,eAAI2N,EAAA1N,UAAA,oBAAiB,KAArB,WACI,OAAOpD,KAAKgS,SAASzL,mDAGzBrD,OAAAC,eAAI2N,EAAA1N,UAAA,eAAY,KAAhB,WACI,OAAOpD,KAAKgS,SAASY,8CAGzB1P,OAAAC,eAAI2N,EAAA1N,UAAA,aAAU,KAAd,WACI,OAAOpD,KAAKgS,SAASa,4CAGzB3P,OAAAC,eAAI2N,EAAA1N,UAAA,cAAW,KAAf,WACI,OAAOW,OAAO+O,WAAa/O,OAAOgP,6CAGtC7P,OAAAC,eAAI2N,EAAA1N,UAAA,WAAQ,KAAZ,WACI,IAAM4P,EAAKC,UAAUC,UAAUC,cAC/B,IAA8B,IAA1BH,EAAGL,QAAQ,UACX,QAASK,EAAGL,QAAQ,WAAa,oCAIzCzP,OAAAC,eAAI2N,EAAA1N,UAAA,UAAO,KAAX,WASI,OANIpD,KAAKwH,KACKxH,KAAK4S,aAAe5S,KAAKgH,WAEzBhH,KAAK4S,cAGF,EAAI5S,KAAK2R,iBAAmB3R,KAAKgH,4CAGtD9D,OAAAC,eAAI2N,EAAA1N,UAAA,eAAY,KAAhB,WACI,OAAOpD,KAAK+Q,WAAWqC,cAAcC,cAAc,oDAGvDnQ,OAAAC,eAAI2N,EAAA1N,UAAA,WAAQ,KAAZ,WACI,OAAOpD,KAAK6R,SAAW7R,KAAK4G,4CAGhC1D,OAAAC,eAAI2N,EAAA1N,UAAA,YAAS,KAAb,WACI,OAAOpD,KAAKsT,YAActT,KAAKgH,WAAa,OAqDhD,SAAgCoF,GACxBA,IACApM,KAAKsT,WAAalH,oCApD1BlJ,OAAAC,eAAI2N,EAAA1N,UAAA,iBAAc,KAAlB,WACI,OAAOpD,KAAK4S,aAAe5S,KAAKgH,4CAGpC9D,OAAAC,eAAI2N,EAAA1N,UAAA,YAAS,KAAb,WACI,GAAIpD,KAAKgS,SACL,OAAOhS,KAAKgS,SAASuB,2CA8B7BrQ,OAAAC,eACI2N,EAAA1N,UAAA,SAAM,KAGV,WACI,OAAOpD,KAAKwT,aALhB,SACWvM,GACPjH,KAAKwT,QAAUvM,mCAMnB/D,OAAAC,eAAwB2N,EAAA1N,UAAA,YAAS,KAAjC,SAAkCgJ,GAC1BA,IACApM,KAAKkR,WAAa9E,oCAU1BlJ,OAAAC,eAAmB2N,EAAA1N,UAAA,OAAI,KAMvB,WACI,QAAIpD,KAAKiH,QACEjH,KAAKmR,WARpB,SAAwB/E,GAChBA,IACApM,KAAKmR,MAAQ/E,oCAYrBlJ,OAAAC,eAAuB2N,EAAA1N,UAAA,WAAQ,KAM/B,WACI,QAAIpD,KAAKiH,QACEjH,KAAKoR,eARpB,SAAgChF,GACxBA,IACApM,KAAKoR,UAAYhF,oCAiBzB0E,EAAA1N,UAAAqQ,eAAA,SAAejS,GACXxB,KAAK0T,cAAgB1T,KAAK2T,YAC1B3T,KAAKgR,IAAI4C,gBAET5T,KAAK6T,eACL7T,KAAKgS,SAAS1J,eAIlBwI,EAAA1N,UAAA0Q,YAAA,SAAYtS,GACJxB,KAAK4I,UAAY5I,KAAKwR,cACtBxR,KAAKgS,SAAShJ,gBAKtB8H,EAAA1N,UAAA2Q,aAAA,SAAavS,GACLxB,KAAK4I,UAAY5I,KAAKwR,cACtBxR,KAAKgS,SAASpJ,YAUtBkI,EAAA1N,UAAA4Q,SAAA,WACIhU,KAAKiU,YAAcjU,KAAKmI,aAAaoF,SAAS9K,OAAS,EAEvDzC,KAAKgC,QAAU,IAAInC,EAAQ,CACvBmD,QAAShD,KAAKmI,aACdzE,UAAW1D,KAAK0D,UAChBJ,eAAgB,CACZrC,UAAa,kBACbE,QAAW,mBAInBnB,KAAKgC,QAAQ+D,GAAG,aAAc/F,KAAKuB,kBACnCvB,KAAKgC,QAAQ+D,GAAG,mBAAoB/F,KAAK2G,uBACzC3G,KAAKgC,QAAQ+D,GAAG,WAAY/F,KAAKsC,gBACjCtC,KAAKgC,QAAQ+D,GAAG,YAAa/F,KAAKuB,kBAClCvB,KAAKgC,QAAQ+D,GAAG,UAAW/F,KAAKsC,gBAChCtC,KAAKgC,QAAQ+D,GAAG,MAAO/F,KAAKmS,WAE5BnS,KAAKkU,iBAGTpD,EAAA1N,UAAA+Q,gBAAA,WACInU,KAAK6T,eAED7T,KAAK4I,UACL5I,KAAKgS,SAASpJ,WAGlB5I,KAAKgH,WAAahH,KAAKoU,gBACvBpU,KAAKqU,QAAUhC,MAAMrS,KAAKgH,YAAYsN,KAAK,GAC3CtU,KAAKgR,IAAI4C,gBACT5T,KAAKgS,SAAS1J,cAGdtI,KAAKuU,oBAGTzD,EAAA1N,UAAAoR,YAAA,SAAYC,IACJA,EAAQtI,OAASsI,EAAQlD,QAAUkD,EAAQxN,UAC3CjH,KAAKkU,gBACLlU,KAAK6T,eACL7T,KAAKgS,SAAS1J,cACdtI,KAAKgR,IAAI4C,kBAIjB9C,EAAA1N,UAAAsR,YAAA,WACI1U,KAAKgC,QAAQwB,WAIjBsN,EAAA1N,UAAAyQ,aAAA,WACI,IAAI1K,EAAqB,CACrBwL,GAAI3U,KAAK2U,GACTxM,aAAcnI,KAAK+Q,WAAWqC,cAAcC,cAAc,mBAC1D9E,YAAavO,KAAK+Q,WAAWqC,cAC7BnM,OAAQjH,KAAKiH,OACbY,UAAW7H,KAAK4U,eAChBpN,KAAMxH,KAAKwH,KACXuB,iBAAkB/I,KAAK+I,iBACvB5B,mBAAoBnH,KAAKmH,mBACzBY,aAAc/H,KAAKmM,MACnB1E,OAAQzH,KAAKyH,OACbC,iBAAkB1H,KAAK0H,iBACvBC,mBAAoB3H,KAAK2H,mBACzBC,yBAA0B5H,KAAK4H,yBAC/BiN,gBAAiB7U,KAAK6U,gBACtBC,aAAc9U,KAAKqR,OACnBzK,WAAY5G,KAAK4G,WACjBW,SAAUvH,KAAKuH,UAGnBvH,KAAKiG,MAAQ,IAAI2K,EAAMzH,GACvBnJ,KAAKkG,MAAQ,IAAIoH,EAAMnE,EAAoBnJ,KAAKiG,OAChDjG,KAAKmG,UAAY,IAAI+C,EAAUC,EAAoBnJ,KAAKiG,MAAOjG,KAAKkG,OACpElG,KAAKoG,MAAQ,IAAIiI,EAAMlF,EAAoBnJ,KAAKiG,MAAOjG,KAAKkG,MAAOlG,KAAKmG,WACxEnG,KAAKgS,SAAW,IAAIhM,EAASmD,EAAoBnJ,KAAKiG,MAAOjG,KAAKkG,MAAOlG,KAAKmG,UAAWnG,KAAKoG,QAGlG0K,EAAA1N,UAAAmR,iBAAA,WAAA,IAAAxU,EAAAC,KACqB,IAAI+U,kBAAiB,SAACC,GACnCjV,EAAKkV,kBAQAC,QAAQlV,KAAK+Q,WAAWqC,cALpB,CACT+B,YAAY,EACZC,WAAW,EACXC,eAAe,KAKvBvE,EAAA1N,UAAA6R,aAAA,WACIjV,KAAKgH,WAAahH,KAAKoU,gBACvBpU,KAAKgS,SAAS1J,cACdtI,KAAKgR,IAAI4C,iBAGb9C,EAAA1N,UAAA8Q,cAAA,WACIlU,KAAKsV,gBAAkBtV,KAAKuR,OAAS,KACrCvR,KAAKuV,eAAiBvV,KAAKmM,MAAQ,MAGvC2E,EAAA1N,UAAAqF,SAAA,SAASlD,GACL,OAAOvF,KAAKgS,SAASvJ,SAASlD,IAuClCuL,EAAA1N,UAAAoS,iCAAA,SAAiChU,GAC7BxB,KAAKgS,SAASxJ,uBAGlBsI,EAAA1N,UAAAqS,YAAA,SAAYC,GACRlU,MAAM0Q,iBACFlS,KAAK6U,gBAAgBc,SAIrBD,EAAME,QACNF,EAAMG,OACN7V,KAAK8V,gBAAiB,IAEtBJ,EAAMK,QACN/V,KAAK8V,gBAAiB,GAG1B9V,KAAKgR,IAAI4C,kBAGb9C,EAAA1N,UAAAwR,aAAA,WACI,IAAIoB,EAAehW,KAAK+Q,WAAWqC,cAAc/K,YAEjD,OAAIrI,KAAKiW,aAGGD,GAFKhW,KAAKiW,YAAc,EAAIjW,KAAKyH,OAAS,IACtBzH,KAAKiW,YAAc,IACTjW,KAAKiW,YAGvB,SAApBjW,KAAKkR,WACE8E,EAEAhW,KAAKkR,YAIpBJ,EAAA1N,UAAAsF,KAAA,WACI1I,KAAKgS,SAAStJ,KAAK1I,KAAK4R,eACxB5R,KAAKgS,SAAShJ,gBAGlB8H,EAAA1N,UAAAuF,KAAA,WACI3I,KAAKgS,SAASrJ,KAAK3I,KAAK4R,eACxB5R,KAAKgS,SAAShJ,gBAGlB8H,EAAA1N,UAAAyD,oBAAA,WACI,GAAI7G,KAAKgS,SACL,OAAOhS,KAAKgS,SAASnL,uBAI7BiK,EAAA1N,UAAA0D,oBAAA,WACI,GAAI9G,KAAKgS,SACL,OAAOhS,KAAKgS,SAASlL,uBAI7BgK,EAAA1N,UAAAgR,cAAA,WACI,OAAIpU,KAAKiH,OACEjH,KAAKiH,OAAOxE,OAEZzC,KAAKmI,aAAaoF,SAAS9K,iCA/Y7CyT,EAAAA,UAASC,KAAA,CAAC,CACPC,SAAU,uBACVC,SAAA,0sIAbkCC,EAAAA,kBAA9BC,EAAAA,qDAgGHC,EAAAA,mBAEAC,EAAAA,sBACAA,EAAAA,qBACAA,EAAAA,wBACAA,EAAAA,gCACAA,EAAAA,4BACAA,EAAAA,oBACAA,EAAAA,4BACAA,EAAAA,sBACAA,EAAAA,yBACAA,EAAAA,gCACAA,EAAAA,kCACAA,EAAAA,wCACAA,EAAAA,+BACAA,EAAAA,gCACAA,EAAAA,kCACAA,EAAAA,yBACAA,EAAAA,2BACAA,EAAAA,6BACAA,EAAAA,0BACAA,EAAAA,sBACAA,EAAAA,6BACAA,EAAAA,2BACAA,EAAAA,sBAEAA,EAAAA,yBAQAA,EAAAA,MAAKN,KAAA,CAAC,gCAMNM,EAAAA,MAAKN,KAAA,CAAC,yBAMNM,EAAAA,MAAKN,KAAA,CAAC,0BAcNM,EAAAA,MAAKN,KAAA,CAAC,uCAcNO,EAAAA,YAAWP,KAAA,CAAC,2CACZO,EAAAA,YAAWP,KAAA,CAAC,wCACZO,EAAAA,YAAWP,KAAA,CAAC,uCAEZQ,EAAAA,aAAYR,KAAA,CAAC,gBAAiB,CAAC,gCAS/BQ,EAAAA,aAAYR,KAAA,CAAC,YAAa,CAAC,iCAO3BQ,EAAAA,aAAYR,KAAA,CAAC,aAAc,CAAC,oBCtKjC,iCApBCS,EAAAA,SAAQT,KAAA,CAAC,CACNU,aAAc,CACV/F,GAEJgG,QAAS,CACLC,EAAAA,cAEJC,QAAS,CACLlG,GAEJmG,UAAW,GAGXC,UAAW,GAGXC,gBAAiB,CACbrG","sourcesContent":["export interface Properties {\r\n    element: HTMLElement;\r\n    listeners?: 'auto' | 'mouse and touch';\r\n    touchListeners?: any;\r\n    mouseListeners?: any;\r\n    otherListeners?: any;\r\n    resize?: boolean;\r\n}\r\n\r\nexport type EventType = undefined | 'touchend' | 'pan' | 'pinch' | 'horizontal-swipe' | 'vertical-swipe' | 'tap' | 'longtap';\r\nexport type TouchHandler = 'handleTouchstart' | 'handleTouchmove' | 'handleTouchend';\r\nexport type MouseHandler = 'handleMousedown' | 'handleMousemove' | 'handleMouseup';\r\n\r\nexport class Touches {\r\n    properties: Properties;\r\n    element: HTMLElement;\r\n    elementPosition: ClientRect;\r\n    eventType: EventType = undefined;\r\n    handlers: any = {};\r\n    startX = 0;\r\n    startY = 0;\r\n    lastTap = 0;\r\n    doubleTapTimeout: any;\r\n    doubleTapMinTimeout = 300;\r\n    tapMinTimeout = 200;\r\n    touchstartTime = 0;\r\n    i: number = 0;\r\n    isMousedown = false;\r\n\r\n    _touchListeners: any = {\r\n        \"touchstart\": \"handleTouchstart\",\r\n        \"touchmove\": \"handleTouchmove\",\r\n        \"touchend\": \"handleTouchend\"\r\n    }\r\n    _mouseListeners: any = {\r\n        \"mousedown\": \"handleMousedown\",\r\n        \"mousemove\": \"handleMousemove\",\r\n        \"mouseup\": \"handleMouseup\",\r\n        \"wheel\": \"handleWheel\"\r\n    }\r\n    _otherListeners: any = {\r\n        \"resize\": \"handleResize\"\r\n    }\r\n\r\n    get touchListeners() {\r\n        return this.properties.touchListeners ? this.properties.touchListeners : this._touchListeners;\r\n    }\r\n\r\n    get mouseListeners() {\r\n        return this.properties.mouseListeners ? this.properties.mouseListeners : this._mouseListeners;\r\n    }\r\n\r\n    get otherListeners() {\r\n        return this.properties.otherListeners ? this.properties.otherListeners : this._otherListeners;\r\n    }\r\n\r\n    constructor(properties: Properties) {\r\n        this.properties = properties;\r\n        this.element = this.properties.element;\r\n        this.elementPosition = this.getElementPosition();\r\n\r\n        this.toggleEventListeners('addEventListener');\r\n    }\r\n\r\n    destroy() {\r\n        this.toggleEventListeners('removeEventListener');\r\n    }\r\n\r\n    toggleEventListeners(action: 'addEventListener' | 'removeEventListener') {\r\n        let listeners;\r\n\r\n        if (this.properties.listeners === 'mouse and touch') {\r\n            listeners = Object.assign(this.touchListeners, this.mouseListeners);\r\n        } else {\r\n            listeners = this.detectTouchScreen() ? this.touchListeners : this.mouseListeners;\r\n        }\r\n\r\n        if (this.properties.resize) {\r\n            listeners = Object.assign(listeners, this.otherListeners);\r\n        }\r\n\r\n        for (var listener in listeners) {\r\n            const handler: MouseHandler = listeners[listener];\r\n\r\n            // Window\r\n            if (listener === \"resize\") {\r\n                if (action === 'addEventListener') {\r\n                    window.addEventListener(listener, this[handler], false);\r\n                }\r\n                if (action === 'removeEventListener') {\r\n                    window.removeEventListener(listener, this[handler], false);\r\n                }\r\n            // Document\r\n            } else if (listener === 'mouseup' || listener === \"mousemove\") {\r\n                if (action === 'addEventListener') {\r\n                    document.addEventListener(listener, this[handler], false);\r\n                }\r\n                if (action === 'removeEventListener') {\r\n                    document.removeEventListener(listener, this[handler], false);\r\n                }\r\n            // Element\r\n            } else {\r\n                if (action === 'addEventListener') {\r\n                    this.element.addEventListener(listener, this[handler], false);\r\n                }\r\n                if (action === 'removeEventListener') {\r\n                    this.element.removeEventListener(listener, this[handler], false);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    addEventListeners(listener: string, handler: string) {\r\n        window.addEventListener(listener, this[handler], false);\r\n    }\r\n\r\n    removeEventListeners(listener: string, handler: string) {\r\n        window.removeEventListener(listener, this[handler], false);\r\n    }\r\n\r\n    /*\r\n     * Listeners\r\n     */\r\n\r\n    /* Touchstart */\r\n\r\n    handleTouchstart = (event: any) => {\r\n        this.elementPosition = this.getElementPosition();\r\n        this.touchstartTime = new Date().getTime();\r\n\r\n        if (this.eventType === undefined) {\r\n            this.getTouchstartPosition(event);\r\n        }\r\n\r\n        this.runHandler(\"touchstart\", event);\r\n    }\r\n\r\n\r\n    /* Touchmove */\r\n\r\n    handleTouchmove = (event: any) => {\r\n        const touches = event.touches;\r\n\r\n        // Pan\r\n        if (this.detectPan(touches)) {\r\n            this.runHandler(\"pan\", event);\r\n        }\r\n\r\n        // Pinch\r\n        if (this.detectPinch(event)) {\r\n            this.runHandler(\"pinch\", event);\r\n        }\r\n\r\n        // Linear swipe\r\n        switch (this.detectLinearSwipe(event)) {\r\n            case \"horizontal-swipe\":\r\n                event.swipeType = \"horizontal-swipe\";\r\n                this.runHandler(\"horizontal-swipe\", event);\r\n                break;\r\n            case \"vertical-swipe\":\r\n                event.swipeType = \"vertical-swipe\";\r\n                this.runHandler(\"vertical-swipe\", event);\r\n                break;\r\n        }\r\n\r\n        // Linear swipe\r\n        if (this.detectLinearSwipe(event) ||\r\n            this.eventType === 'horizontal-swipe' ||\r\n            this.eventType === 'vertical-swipe') {\r\n\r\n            this.handleLinearSwipe(event);\r\n        }\r\n    }\r\n\r\n    handleLinearSwipe(event: any) {\r\n        //event.preventDefault();\r\n\r\n        this.i++;\r\n\r\n        if (this.i > 3) {\r\n            this.eventType = this.getLinearSwipeType(event);\r\n        }\r\n\r\n        if (this.eventType === 'horizontal-swipe') {\r\n            this.runHandler('horizontal-swipe', event);\r\n        }\r\n\r\n        if (this.eventType === 'vertical-swipe') {\r\n            this.runHandler('vertical-swipe', event);\r\n        }\r\n    }\r\n\r\n\r\n    /* Touchend */\r\n\r\n    handleTouchend = (event: any) => {\r\n        const touches = event.touches;\r\n\r\n        // Double Tap\r\n        if (this.detectDoubleTap()) {\r\n            this.runHandler(\"double-tap\", event);\r\n        }\r\n\r\n        // Tap\r\n        this.detectTap();\r\n\r\n        this.runHandler(\"touchend\", event);\r\n        this.eventType = 'touchend';\r\n\r\n        if (touches && touches.length === 0) {\r\n            this.eventType = undefined;\r\n            this.i = 0;\r\n        }\r\n    }\r\n\r\n\r\n    /* Mousedown */\r\n\r\n    handleMousedown = (event: any) => {\r\n        this.isMousedown = true;\r\n        this.elementPosition = this.getElementPosition();\r\n        this.touchstartTime = new Date().getTime();\r\n\r\n        if (this.eventType === undefined) {\r\n            this.getMousedownPosition(event);\r\n        }\r\n\r\n        this.runHandler(\"mousedown\", event);\r\n    }\r\n\r\n\r\n    /* Mousemove */\r\n\r\n    handleMousemove = (event: any) => {\r\n        //event.preventDefault();\r\n        \r\n        if (!this.isMousedown) {\r\n            return;\r\n        }\r\n\r\n        // Pan\r\n        this.runHandler(\"pan\", event);\r\n\r\n        // Linear swipe\r\n        switch (this.detectLinearSwipe(event)) {\r\n            case \"horizontal-swipe\":\r\n                event.swipeType = \"horizontal-swipe\";\r\n                this.runHandler(\"horizontal-swipe\", event);\r\n                break;\r\n            case \"vertical-swipe\":\r\n                event.swipeType = \"vertical-swipe\";\r\n                this.runHandler(\"vertical-swipe\", event);\r\n                break;\r\n        }\r\n\r\n        // Linear swipe\r\n        if (this.detectLinearSwipe(event) ||\r\n            this.eventType === 'horizontal-swipe' ||\r\n            this.eventType === 'vertical-swipe') {\r\n\r\n            this.handleLinearSwipe(event);\r\n        }\r\n    }\r\n\r\n\r\n    /* Mouseup */\r\n\r\n    handleMouseup = (event: any) => {\r\n\r\n        // Tap\r\n        this.detectTap();\r\n\r\n        this.isMousedown = false;\r\n        this.runHandler(\"mouseup\", event);\r\n        this.eventType = undefined;\r\n        this.i = 0;\r\n    }\r\n\r\n\r\n    /* Wheel */\r\n\r\n    handleWheel = (event: any) => {\r\n        this.runHandler(\"wheel\", event);\r\n    }\r\n\r\n    /* Resize */\r\n\r\n    handleResize = (event: any) => {\r\n        this.runHandler(\"resize\", event);\r\n    }\r\n\r\n    runHandler(eventName: any, response: any) {\r\n        if (this.handlers[eventName]) {\r\n            this.handlers[eventName](response);\r\n        }\r\n    }\r\n\r\n\r\n    /*\r\n     * Detection\r\n     */\r\n\r\n    detectPan(touches: any) {\r\n        return touches.length === 1 && !this.eventType || this.eventType === 'pan';\r\n    }\r\n\r\n    detectDoubleTap() {\r\n        if (this.eventType != undefined) {\r\n            return;\r\n        }\r\n\r\n        const currentTime = new Date().getTime();\r\n        const tapLength = currentTime - this.lastTap;\r\n\r\n        clearTimeout(this.doubleTapTimeout);\r\n\r\n        if (tapLength < this.doubleTapMinTimeout && tapLength > 0) {\r\n            return true;\r\n        } else {\r\n            this.doubleTapTimeout = setTimeout(() => {\r\n                clearTimeout(this.doubleTapTimeout);\r\n            }, this.doubleTapMinTimeout);\r\n        }\r\n        this.lastTap = currentTime;\r\n    }\r\n\r\n    detectTap(): void {\r\n        if (this.eventType != undefined) {\r\n            return;\r\n        }\r\n\r\n        const currentTime = new Date().getTime();\r\n        const tapLength = currentTime - this.touchstartTime;\r\n\r\n        if (tapLength > 0) {\r\n            if (tapLength < this.tapMinTimeout) {\r\n                this.runHandler(\"tap\", event);\r\n            } else {\r\n                this.runHandler(\"longtap\", event);\r\n            }\r\n        }\r\n    }\r\n\r\n    detectPinch(event: any) {\r\n        const touches = event.touches;\r\n        return (touches.length === 2 && this.eventType === undefined) || this.eventType === 'pinch';\r\n    }\r\n\r\n    detectLinearSwipe(event: any) {\r\n        const touches = event.touches;\r\n\r\n        if (touches) {\r\n            if (touches.length === 1 && !this.eventType || this.eventType === 'horizontal-swipe' || this.eventType === 'vertical-swipe') {\r\n                return this.getLinearSwipeType(event);\r\n            }\r\n        } else {\r\n            if (!this.eventType || this.eventType === 'horizontal-swipe' || this.eventType === 'vertical-swipe') {\r\n                return this.getLinearSwipeType(event);\r\n            }\r\n        }\r\n    }\r\n\r\n    getLinearSwipeType(event: any) {\r\n        if (this.eventType !== 'horizontal-swipe' && this.eventType !== 'vertical-swipe') {\r\n            const movementX = Math.abs(this.moveLeft(0, event) - this.startX);\r\n            const movementY = Math.abs(this.moveTop(0, event) - this.startY);\r\n\r\n            if ((movementY * 3) > movementX) {\r\n                return 'vertical-swipe';\r\n            } else {\r\n                return 'horizontal-swipe';\r\n            }\r\n        } else {\r\n            return this.eventType;\r\n        }\r\n    }\r\n\r\n    getElementPosition() {\r\n        return this.element.getBoundingClientRect();\r\n    }\r\n\r\n    getTouchstartPosition(event: any) {\r\n        this.startX = event.touches[0].clientX - this.elementPosition.left;\r\n        this.startY = event.touches[0].clientY - this.elementPosition.top;\r\n    }\r\n\r\n    getMousedownPosition(event: any) {\r\n        this.startX = event.clientX - this.elementPosition.left;\r\n        this.startY = event.clientY - this.elementPosition.top;\r\n    }\r\n\r\n    moveLeft(index: any, event: any) {\r\n        const touches = event.touches;\r\n\r\n        if (touches) {\r\n            return touches[index].clientX - this.elementPosition.left;\r\n        } else {\r\n            return event.clientX - this.elementPosition.left;\r\n        }\r\n    }\r\n\r\n    moveTop(index: any, event: any) {\r\n        const touches = event.touches;\r\n\r\n        if (touches) {\r\n            return touches[index].clientY - this.elementPosition.top;\r\n        } else {\r\n            return event.clientY - this.elementPosition.top;\r\n        }\r\n    }\r\n\r\n    detectTouchScreen() {\r\n        var prefixes = ' -webkit- -moz- -o- -ms- '.split(' ');\r\n        var mq = function(query: any) {\r\n            return window.matchMedia(query).matches;\r\n        }\r\n\r\n        if (('ontouchstart' in window)) {\r\n            return true;\r\n        }\r\n\r\n        // include the 'heartz' as a way to have a non matching MQ to help terminate the join\r\n        // https://git.io/vznFH\r\n        var query = ['(', prefixes.join('touch-enabled),('), 'heartz', ')'].join('');\r\n        return mq(query);\r\n    }\r\n\r\n\r\n    /* Public properties and methods */\r\n    on(event: EventType, handler: Function) {\r\n        if (event) {\r\n            this.handlers[event] = handler;\r\n        }\r\n    }\r\n}","import {Properties} from './interfaces';\r\n\r\nexport class Carousel {\r\n    cellsElement: HTMLElement;\r\n\r\n    /* The slide length has been limited by the limitSlideLength() method */\r\n    isSlideLengthLimited: boolean;\r\n\r\n    isContentImages: boolean = true;\r\n    visibleWidth: number;\r\n    isLazyLoad: boolean = true;\r\n    isContainerLocked: boolean = true;\r\n    alignCells: \"left\" | \"center\" = \"left\";\r\n    initialContainerPosition: number = 0;\r\n    autoplayId: any;\r\n    startTime;\r\n    containerPullLimit = 100;\r\n\r\n    get cellLength() {\r\n        return this.cells.cellLength;\r\n    }\r\n\r\n    get cellLengthInLightDOMMode() {\r\n        if (this.images) {\r\n            let cellLength = this.visibleCellsCount + this.overflowCellsLimit * 2;\r\n            if (cellLength > this.images.length) {\r\n                cellLength = this.images.length;\r\n            }\r\n            return cellLength;\r\n        } else {\r\n            return this.cellLength;\r\n        }\r\n    }\r\n\r\n    get lastCellIndex() {\r\n        return this.images.length ? (this.images.length - 1) : (this.cells.cellLength - 1);\r\n    }\r\n\r\n    get overflowCellsLimit() {\r\n        if (this.images && this.isImagesLessCellLimit) {\r\n            return Math.floor((this.images.length - this.visibleCellsCount) / 2);\r\n        } else {\r\n            return this.properties.overflowCellsLimit;\r\n        }\r\n    }\r\n\r\n    get isImagesLessCellLimit() {\r\n        return this.properties.overflowCellsLimit * 2 + this.visibleCellsCount > this.images.length;\r\n    }\r\n\r\n    get cellLimit() {\r\n        if (this.isLightDOM) {\r\n            return this.visibleCellsCount + this.overflowCellsLimit * 2;\r\n        } else {\r\n            return this.properties.images.length;\r\n        }\r\n    }\r\n\r\n    get isLightDOM() {\r\n        return this.properties.lightDOM || this.properties.loop;\r\n    }\r\n\r\n    get images() {\r\n        return this.properties.images;\r\n    }\r\n\r\n    get margin() {\r\n        return this.properties.margin;\r\n    }\r\n\r\n    get minSwipeDistance() {\r\n        return this.properties.minSwipeDistance;\r\n    }\r\n\r\n    get transitionDuration() {\r\n        return this.properties.transitionDuration;\r\n    }\r\n\r\n    get transitionTimingFunction() {\r\n        return this.properties.transitionTimingFunction;\r\n    }\r\n\r\n    get fullCellWidth() {\r\n        return this.properties.cellWidth + this.margin;\r\n    }\r\n\r\n    get visibleCellsCount() {\r\n        return Math.ceil(this.visibleWidth / this.fullCellWidth);\r\n    }\r\n\r\n    get lapCounter() {\r\n        return Math.floor(this.slide.counter / this.cellLengthInLightDOMMode);\r\n    }\r\n\r\n    get slideCounter() {\r\n        return this.slide.counter;\r\n    }\r\n\r\n    constructor(\r\n        private properties: Properties,\r\n        private utils,\r\n        private cells,\r\n        private container,\r\n        private slide) {\r\n\r\n        this.init();\r\n    }\r\n\r\n    init() {\r\n        this.cellsElement = this.properties.cellsElement;\r\n        this.visibleWidth = this.properties.visibleWidth || this.cellsElement.parentElement.clientWidth;\r\n    }\r\n\r\n    lineUpCells() {\r\n        this.cells.lineUp();\r\n    }\r\n\r\n    handleTouchstart = (event: any) => {\r\n        this.container.handleTouchstart();\r\n        this.slide.handleTouchstart(event);\r\n    }\r\n\r\n    handleHorizontalSwipe = (event: any) => {\r\n        this.container.handleHorizontalSwipe();\r\n    }\r\n\r\n    handleTouchend = (event: any) => {\r\n        if (this.properties.freeScroll) {\r\n            this.container.handleTouchend();\r\n        } else {\r\n            this.container.handleTouchend(true);\r\n            this.slide.handleTouchend(event);\r\n        }\r\n    }\r\n\r\n    handleTransitionend() {\r\n        this.slide.handleTransitionend();\r\n    }\r\n\r\n    getImage(index) {\r\n        return this.cells.getImage(index);\r\n    }\r\n\r\n    next(length: number = 1) {\r\n        if (!this.isNextArrowDisabled()) {\r\n            this.slide.next(length);\r\n        }\r\n    }\r\n\r\n    prev(length: number = 1) {\r\n        this.slide.prev(length);\r\n    }\r\n\r\n    isNextArrowDisabled = () => {\r\n        return this.slide.isNextArrowDisabled();\r\n    }\r\n\r\n    isPrevArrowDisabled = () => {\r\n        return this.slide.isPrevArrowDisabled();\r\n    }\r\n\r\n    autoplay() {\r\n        this.autoplayId = setInterval(() => {\r\n            this.next();\r\n        }, this.properties.autoplayInterval);\r\n    }\r\n\r\n    stopAutoplay() {\r\n        if (this.autoplayId) {\r\n            clearInterval(this.autoplayId);\r\n        }\r\n    }\r\n}","import {Properties as CarouselProperties} from './interfaces';\r\n\r\nexport class Container {\r\n    /* The index of the new position relative to \r\n     * the active index, for example -1 or +1 \r\n     */\r\n    newPositionIndex: number = 0;\r\n    isPositionCorrection: boolean;\r\n    initialPositionX: number = 0;\r\n    initialElementPositionX: number = 0;\r\n    isLocked: boolean = true;\r\n    pullLimit = 100;\r\n    startTime;\r\n    startX: number;\r\n    moveX: number;\r\n    isSwipeInProgress: boolean;\r\n\r\n    get visibleWidth() {\r\n        return this.utils.visibleWidth;\r\n    }\r\n\r\n    get overflowCellsLimit() {\r\n        return this.utils.overflowCellsLimit;\r\n    }\r\n\r\n    get images() {\r\n        return this.carouselProperties.images;\r\n    }\r\n\r\n    get element() {\r\n        return this.carouselProperties.cellsElement;\r\n    }\r\n\r\n    get freeScroll() {\r\n        return this.carouselProperties.freeScroll;\r\n    }\r\n\r\n    get fullCellWidth() {\r\n        return this.carouselProperties.cellWidth + this.carouselProperties.margin;\r\n    }\r\n\r\n    get visibleCellsCount() {\r\n        return Math.ceil(this.visibleWidth / this.fullCellWidth);\r\n    }\r\n\r\n    get transitionDuration() {\r\n        return this.carouselProperties.transitionDuration;\r\n    }\r\n\r\n    get transitionTimingFunction() {\r\n        return this.carouselProperties.transitionTimingFunction;\r\n    }\r\n\r\n    get cellLength() {\r\n        if (this.images) {\r\n            return this.images.length;\r\n        } else {\r\n            return this.cells.cellLength;\r\n        }\r\n    }\r\n\r\n    get cellLengthInLightDOMMode() {\r\n        if (this.images) {\r\n            let cellLength = this.visibleCellsCount + this.overflowCellsLimit * 2;\r\n            if (cellLength > this.images.length) {\r\n                cellLength = this.images.length;\r\n            }\r\n            return cellLength;\r\n        } else {\r\n            return this.cellLength;\r\n        }\r\n    }\r\n\r\n    get tooFewCells() {\r\n        return this.visibleCellsCount > this.cellLength;\r\n    }\r\n\r\n    get disabled() {\r\n        return this.tooFewCells;\r\n    }\r\n\r\n    get margin() {\r\n        return this.carouselProperties.margin;\r\n    }\r\n\r\n    get isLightDOM() {\r\n        return this.carouselProperties.lightDOM || this.carouselProperties.loop;\r\n    }\r\n\r\n    constructor(private carouselProperties: CarouselProperties,\r\n        private utils,\r\n        private cells) {\r\n\r\n        this.init()\r\n    }\r\n\r\n    init() {\r\n        this.setWidth();\r\n    }\r\n\r\n    handleTouchstart() {\r\n        this.startX = this.utils.getStartX(event);\r\n        this.startTime = new Date().getTime();\r\n        this.initialElementPositionX = this.getInitialElementPositionX();\r\n    }\r\n\r\n    handleHorizontalSwipe() {\r\n        if (this.disabled) {\r\n            return;\r\n        }\r\n\r\n        if (!this.isSwipeInProgress) {\r\n            this.startX = this.utils.getStartX(event);\r\n            this.startTime = new Date().getTime();\r\n            this.initialElementPositionX = this.getInitialElementPositionX();\r\n        }\r\n\r\n        this.isSwipeInProgress = true;\r\n        this.moveX = this.utils.getMoveX(event);\r\n        this.move();\r\n    }\r\n\r\n    handleTouchend(simpleProcessing: boolean = false) {\r\n        if (this.disabled) {\r\n            return;\r\n        }\r\n\r\n        /* If touchend was passed to the Slide class */\r\n        if (simpleProcessing) {\r\n            this.isSwipeInProgress = false;\r\n            return;\r\n        }\r\n\r\n        this.isSwipeInProgress = false;\r\n        this.finishMoving();\r\n        this.clearInitialValues();\r\n    }\r\n\r\n    move() {\r\n        let positionX = this.getMovePositionX();\r\n        const isPulled = this.detectPulled();\r\n        const direction = this.getDirection();\r\n\r\n        if (isPulled) {\r\n            if (isPulled.edge === \"left\" && direction === \"right\" ||\r\n                isPulled.edge === \"right\" && direction === \"left\") {\r\n                positionX = this.slowdownOnPull(positionX);\r\n            }\r\n        }\r\n\r\n        this.transformPositionX(positionX, 0);\r\n\r\n        if (this.freeScroll) {\r\n            this.initialPositionX = positionX;\r\n        }\r\n\r\n        if (isPulled) {\r\n            if (isPulled.edge === 'left' && isPulled.overflowX > this.pullLimit) {\r\n                this.initialPositionX = 0;\r\n            }\r\n            if (isPulled.edge === 'right' && isPulled.overflowX > this.pullLimit) {\r\n                this.initialPositionX = positionX;\r\n            }\r\n        }\r\n    }\r\n\r\n    getMovePositionX() {\r\n        const distance = this.getDistance();\r\n        return this.initialElementPositionX - distance;\r\n    }\r\n\r\n    getDistance() {\r\n        return this.startX - this.moveX;\r\n    }\r\n\r\n    /* If the container is pulled out of the left or right border */\r\n    detectPulled() {\r\n        const currentPositionX = this.getCurrentPositionX();\r\n\r\n        if (currentPositionX > 0) {\r\n            return {\r\n                edge: 'left',\r\n                positionX: currentPositionX,\r\n                overflowX: Math.abs(currentPositionX)\r\n            }\r\n        }\r\n\r\n        if (currentPositionX < this.getEndPosition()) {\r\n            return {\r\n                edge: 'right',\r\n                positionX: currentPositionX,\r\n                overflowX: Math.abs(currentPositionX - this.getEndPosition())\r\n            }\r\n        }\r\n    }\r\n\r\n    slowdownOnPull(_positionX) {\r\n        let distance = Math.abs(this.getDistance());\r\n        const endPosition = this.getEndPosition();\r\n        const isPulled = this.detectPulled();\r\n        const decelerationRatio = 3 + isPulled.overflowX / 50;\r\n        let positionX;\r\n\r\n        if (isPulled.edge === 'left') {\r\n\r\n            if (this.initialElementPositionX < 0) {\r\n                distance = distance - Math.abs(this.initialElementPositionX);\r\n            }\r\n\r\n            const rubberPositionX = distance / decelerationRatio;\r\n            positionX = rubberPositionX;\r\n\r\n            if (this.initialElementPositionX > 0) {\r\n                positionX = this.initialElementPositionX + rubberPositionX;\r\n            }\r\n\r\n            if (positionX > this.pullLimit) {\r\n                positionX = this.pullLimit;\r\n            }\r\n        }\r\n\r\n        if (isPulled.edge === 'right') {\r\n            const rubberPositionX = endPosition + (((this.initialElementPositionX - distance) - endPosition) / decelerationRatio);\r\n            const containerWidth = this.getWidth();\r\n\r\n            positionX = rubberPositionX;\r\n\r\n            if (this.initialElementPositionX < -(containerWidth - this.visibleWidth)) {\r\n                positionX = ((containerWidth - this.visibleWidth) + this.initialElementPositionX) + rubberPositionX;\r\n            }\r\n\r\n            if (positionX < endPosition - this.pullLimit) {\r\n                positionX = endPosition - this.pullLimit;\r\n            }\r\n        }\r\n\r\n        return positionX;\r\n    }\r\n\r\n    finishMoving() {\r\n        const positionX = this.getMovePositionX();\r\n        let newPositionX;\r\n\r\n        if (this.freeScroll) {\r\n            newPositionX = this.getInertia();\r\n        }\r\n\r\n        /* Align container while pulling */\r\n        newPositionX = this.getAlignedPositionOnPull(newPositionX);\r\n\r\n        this.transformPositionX(newPositionX);\r\n        this.setInitialPosition(positionX);\r\n    }\r\n\r\n    /* Returns the new position of the container with inertia */\r\n    getInertia() {\r\n        const distance = this.getDistance();\r\n        const currentTime = new Date().getTime();\r\n        const tapLength = currentTime - this.startTime;\r\n        let inertia = (distance / tapLength) * 100;\r\n\r\n        return this.initialPositionX - inertia;\r\n    }\r\n\r\n    getAlignedPositionOnPull(newPositionX) {\r\n        const direction = this.getDirection();\r\n\r\n        if (direction === 'left') {\r\n            let endPosition = this.getEndPosition();\r\n            if (newPositionX < endPosition) {\r\n                return endPosition;\r\n            }\r\n        }\r\n        if (direction === 'right') {\r\n            if (newPositionX > 0) {\r\n                return 0;\r\n            }\r\n        }\r\n\r\n        return newPositionX;\r\n    }\r\n\r\n    getCurrentPositionX() {\r\n        const parentPosition = this.element.parentElement.getBoundingClientRect();\r\n        const position = this.element.getBoundingClientRect();\r\n        return position.left - parentPosition.left;\r\n    }\r\n\r\n    getEndPosition() {\r\n        if (this.isLightDOM) {\r\n            let imagesInContainer = this.cells.imageUtils.getImages();\r\n            return -(imagesInContainer.length * this.fullCellWidth - this.visibleWidth - this.margin);\r\n        } else {\r\n            const width = this.getWidth();\r\n            const visibleWidth = this.element.parentElement.clientWidth;\r\n            return visibleWidth - width;\r\n        }\r\n    }\r\n\r\n    transformPositionX(value, duration = this.transitionDuration) {\r\n        if (value === undefined) {\r\n            return;\r\n        }\r\n\r\n        this.element.style.transition = 'transform ' + duration + 'ms ' + this.transitionTimingFunction;\r\n        this.element.style.transform = 'translateX(' + value + 'px)';\r\n    }\r\n\r\n    getWidth() {\r\n        let width = this.cellLengthInLightDOMMode * this.fullCellWidth;\r\n        let totalImageWidth = this.cellLength * this.fullCellWidth;\r\n\r\n        if (totalImageWidth < width) {\r\n            width = totalImageWidth;\r\n        }\r\n\r\n        return this.isLightDOM ? width : totalImageWidth;\r\n    }\r\n\r\n    setWidth() {\r\n        const width = this.getWidth();\r\n        this.element.style.width = width + \"px\";\r\n    }\r\n\r\n    setInitialPosition(position) {\r\n        this.initialPositionX = position;\r\n    }\r\n\r\n    getElementPosition() {\r\n        return this.element.getBoundingClientRect();\r\n    }\r\n\r\n    getInitialElementPositionX() {\r\n        const carouselElementPosition = this.utils.getCarouselElementPosition()['left'];\r\n        return this.getElementPosition()['left'] - carouselElementPosition;\r\n    }\r\n\r\n    clearInitialValues() {\r\n        this.startX = this.moveX = undefined;\r\n    }\r\n\r\n    getDirection() {\r\n        const direction = Math.sign(this.startX - this.moveX);\r\n\r\n        if (direction === -1) {\r\n            return 'right';\r\n        }\r\n        if (direction === 1) {\r\n            return 'left';\r\n        }\r\n    }\r\n}","import {Properties as CarouselProperties} from './interfaces';\r\n\r\nexport class ImageUtils {\r\n    cellStack;\r\n    imageStack;\r\n    element;\r\n\r\n    constructor(element) {\r\n        this.element = element;\r\n    }\r\n\r\n    getImages() {\r\n        return this.cellStack.filter(this.filter);\r\n    }\r\n\r\n    comparePositions(a, b) {\r\n        if (a.positionX < b.positionX) {\r\n            return -1;\r\n        }\r\n        if (a.positionX > b.positionX) {\r\n            return 1;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    filter(cell) {\r\n        return cell.img !== undefined;\r\n    }\r\n}\r\n\r\nexport class Cells {\r\n    cells: HTMLCollection;\r\n    element: HTMLElement;\r\n    visibleWidth: number;\r\n    counter: number = 0;\r\n    imageUtils;\r\n\r\n    get images() {\r\n        return this.carouselProperties.images;\r\n    }\r\n\r\n    get cellLength() {\r\n        return this.cells.length;\r\n    }\r\n\r\n    get fullCellWidth() {\r\n        return this.carouselProperties.cellWidth + this.carouselProperties.margin;\r\n    }\r\n\r\n    get cellLengthInLightDOMMode() {\r\n        if (this.images) {\r\n            let cellLength = this.visibleCellsCount + this.utils.overflowCellsLimit * 2;\r\n            if (cellLength > this.images.length) {\r\n                cellLength = this.images.length;\r\n            }\r\n            return cellLength;\r\n        } else {\r\n            return this.cellLength;\r\n        }\r\n    }\r\n\r\n    get visibleCellsCount() {\r\n        return Math.ceil(this.visibleWidth / this.fullCellWidth);\r\n    }\r\n\r\n    get overflowCellsLimit() {\r\n        return this.carouselProperties.overflowCellsLimit;\r\n    }\r\n\r\n    get isLightDOM() {\r\n        return this.carouselProperties.lightDOM || this.carouselProperties.loop;\r\n    }\r\n\r\n    constructor(private carouselProperties: CarouselProperties,\r\n        private utils) {\r\n\r\n        this.imageUtils = new ImageUtils(this.element);\r\n        this.init(carouselProperties);\r\n    }\r\n\r\n    lineUp() {\r\n        const cells = this.element.children;\r\n        this.imageUtils.cellStack = [];\r\n\r\n        for (var i = 0; i < cells.length; i++) {\r\n            let cell = cells[i];\r\n            let positionX = this.getCellPositionInContainer(i);\r\n            (cell as HTMLElement).style.transform = 'translateX(' + positionX + 'px)';\r\n            (cell as HTMLElement).style.width = this.carouselProperties.cellWidth + 'px';\r\n\r\n            if (this.getImage(i)) {\r\n                this.imageUtils.cellStack.push({\r\n                    index: i,\r\n                    positionX,\r\n                    img: this.getImage(i)['image']\r\n                });\r\n            }\r\n        };\r\n    }\r\n\r\n    ifSequenceOfCellsIsChanged() {\r\n        const cells = this.element.children;\r\n        return cells[0]['style'].transform !== 'translateX(0px)';\r\n    }\r\n\r\n    getCellPositionInContainer(cellIndexInDOMTree) {\r\n        let positionIndex = this.getCellIndexInContainer(cellIndexInDOMTree);\r\n        return positionIndex * this.fullCellWidth;\r\n    }\r\n\r\n    getCellIndexInContainer(cellIndexInDOMTree) {\r\n        let positionIndex;\r\n\r\n        if (!this.isLightDOM) {\r\n            return cellIndexInDOMTree;\r\n        }\r\n\r\n        let cellLength = this.cellLengthInLightDOMMode;\r\n        let counter = this.counter - this.carouselProperties.overflowCellsLimit;\r\n\r\n        if (counter > cellLength) {\r\n            counter = counter % cellLength;\r\n        }\r\n\r\n        if (counter < 0) {\r\n            return cellIndexInDOMTree;\r\n        } else {\r\n            positionIndex = cellIndexInDOMTree - counter;\r\n            if (positionIndex < 0) {\r\n                positionIndex = cellLength + positionIndex;\r\n            }\r\n        }\r\n\r\n        return positionIndex;\r\n    }\r\n\r\n    getImage(cellIndex) {\r\n        if (!this.images) {\r\n            return;\r\n        }\r\n\r\n        let imageIndex = this.getImageIndex(cellIndex);\r\n        let file = this.images[imageIndex];\r\n\r\n        if (file && !file.type) {\r\n            file.type = 'image';\r\n        }\r\n\r\n        return {\r\n            image: this.images[imageIndex],\r\n            imageIndex\r\n        };\r\n    }\r\n\r\n    getImageIndex(cellIndexInDOMTree: number) {\r\n        const positionIndex = this.getCellIndexInContainer(cellIndexInDOMTree);\r\n        let imageIndex;\r\n        let overflowCellsLimit = this.carouselProperties.overflowCellsLimit;\r\n\r\n        if (this.counter > overflowCellsLimit) {\r\n            let cellLimitOverflow = this.counter - overflowCellsLimit;\r\n            imageIndex = positionIndex + cellLimitOverflow;\r\n\r\n            if (this.images && this.carouselProperties.loop) {\r\n                imageIndex = imageIndex % this.images.length;\r\n            }\r\n        } else {\r\n            imageIndex = cellIndexInDOMTree;\r\n        }\r\n\r\n        return imageIndex;\r\n    }\r\n\r\n    setCounter(value: number) {\r\n        this.counter = value;\r\n    }\r\n\r\n    init(carouselProperties: CarouselProperties) {\r\n        this.element = this.carouselProperties.cellsElement;\r\n        this.cells = this.element.children;\r\n        this.visibleWidth = this.carouselProperties.visibleWidth || this.element.parentElement.clientWidth;\r\n    }\r\n}","import {Properties as CarouselProperties} from './interfaces';\r\n\r\nexport interface Properties {\r\n    carouselProperties: CarouselProperties;\r\n}\r\n\r\nexport class Slide {\r\n    slideLength: number;\r\n    isSlideInProgress: boolean;\r\n    direction: 'left' | 'right';\r\n    counter: number = 0;\r\n    _counter: number = 0;\r\n    distance;\r\n    distanceAbs;\r\n    visibleWidth: number;\r\n    isNotClickOnArrow: boolean;\r\n    initialPositionX: number = 0;\r\n    currentPositionX: number = 0;\r\n\r\n    /* The slide length has been limited by the limitSlideLength() method */\r\n    isSlideLengthLimited: boolean;\r\n\r\n    get fullCellWidth() {\r\n        return this.carouselProperties.cellWidth + this.carouselProperties.margin;\r\n    }\r\n\r\n    get margin() {\r\n        return this.carouselProperties.margin;\r\n    }\r\n\r\n    get minSwipeDistance() {\r\n        return this.carouselProperties.minSwipeDistance;\r\n    }\r\n\r\n    get visibleCellsCount() {\r\n        return Math.ceil(this.visibleWidth / this.fullCellWidth);\r\n    }\r\n\r\n    get visibleCellsOverflowContainer() {\r\n        return (this.visibleCellsCount * this.fullCellWidth - this.margin) > this.visibleWidth;\r\n    }\r\n\r\n    /* The position to which the container returns after each slide \r\n     * in the light DUM tree mode. \r\n     */\r\n    get fixedContainerPosition() {\r\n        return -(this.overflowCellsLimit * this.fullCellWidth);\r\n    }\r\n\r\n    get overflowCellsLimit() {\r\n        return this.carouselProperties.overflowCellsLimit;\r\n    }\r\n\r\n    get images() {\r\n        return this.carouselProperties.images;\r\n    }\r\n\r\n    get cellLength() {\r\n        if (this.isLightDOM) {\r\n            return this.cells.cellLengthInLightDOMMode;\r\n        } else {\r\n            if (this.images) {\r\n                return this.images.length;\r\n            } else {\r\n                return this.cells.cellLength;\r\n            }\r\n        }\r\n    }\r\n\r\n    get isLightDOM() {\r\n        return this.carouselProperties.lightDOM || this.carouselProperties.loop;\r\n    }\r\n\r\n    constructor(private carouselProperties: CarouselProperties,\r\n        private utils,\r\n        private cells,\r\n        private container) {\r\n\r\n        this.init();\r\n    }\r\n\r\n    init() {\r\n        this.visibleWidth = this.carouselProperties.visibleWidth || this.carouselProperties.hostElement.clientWidth;\r\n    }\r\n\r\n    handleTouchstart(event) {\r\n        /* Touchstart event is not called for arrow */\r\n        this.isNotClickOnArrow = true;\r\n        this.isSlideLengthLimited = undefined;\r\n\r\n        if (!this.isSlideInProgress) {\r\n            this.initialPositionX = this.container.getCurrentPositionX();\r\n        }\r\n    }\r\n\r\n    handleTouchend(event) {\r\n        if (!this.isNotClickOnArrow) {\r\n            return;\r\n        }\r\n        this.currentPositionX = this.container.getCurrentPositionX();\r\n        this.distanceAbs = Math.abs(this.initialPositionX - this.currentPositionX);\r\n        this.distance = this.initialPositionX - this.currentPositionX;\r\n        this.direction = this.getDirection();\r\n        this.isNotClickOnArrow = undefined;\r\n        this.handleSlide();\r\n    }\r\n\r\n    handleTransitionend() {\r\n        this.setCounter();\r\n        this.isSlideInProgress = false;\r\n\r\n        if (this.isLightDOM) {\r\n            this.alignContainerFast();\r\n        }\r\n    }\r\n\r\n    detectClickOnArrow(event) {\r\n        return event.target.classList.contains(\"carousel-arrow\");\r\n    }\r\n\r\n    handleSlide(customSlideLength: number = undefined) {\r\n        let isUsingButton = customSlideLength;\r\n        let newPositionX;\r\n\r\n        if (isUsingButton && this.isSlideInProgress || !this.direction) {\r\n            return;\r\n        }\r\n\r\n        /* Custom slide length is used in arrows */\r\n        if (customSlideLength) {\r\n            this.slideLength = this.limitSlideLength(customSlideLength);\r\n\r\n            if (!this.isSlideInProgress) {\r\n                this.initialPositionX = this.container.getCurrentPositionX();\r\n            }\r\n        } else {\r\n            this.slideLength = this.getSlideLength(this.distanceAbs);\r\n        }\r\n\r\n        /* Store intermediate counter value */\r\n        this._counter = this.getPreliminaryCounter();\r\n\r\n        if (this.direction === 'left') {\r\n            if (!customSlideLength) {\r\n                this.slideLength = this.limitSlideLength(this.getSlideLength(this.distanceAbs));\r\n            }\r\n\r\n            this._counter = this.getPreliminaryCounter();\r\n            let isSlidesEnd = this.isSlidesEnd(this._counter);\r\n            newPositionX = this.getPositionByIndex(this._counter);\r\n\r\n            if (isSlidesEnd) {\r\n                this._counter = this.counter;\r\n\r\n                newPositionX = this.getPositionByIndex(this.counter);\r\n                this.slideLength = 0;\r\n            }\r\n        }\r\n\r\n        if (this.direction === 'right') {\r\n            if (!customSlideLength) {\r\n                this.slideLength = this.getSlideLength(this.distanceAbs);\r\n            }\r\n\r\n            if (this._counter < 0) {\r\n                this._counter = this.counter;\r\n                this.slideLength = this.counter;\r\n            }\r\n\r\n            newPositionX = this.getPositionByIndex(this.counter - this.slideLength);\r\n        }\r\n\r\n        if (this.container.getCurrentPositionX() !== newPositionX) {\r\n            this.isSlideInProgress = true;\r\n            this.container.transformPositionX(newPositionX);\r\n        }\r\n    }\r\n\r\n    next(length: number = 1) {\r\n        this.direction = 'left';\r\n        this.handleSlide(length);\r\n    }\r\n\r\n    prev(length: number = 1) {\r\n        this.direction = 'right';\r\n        this.handleSlide(length);\r\n    }\r\n\r\n    select(index: number) {\r\n        if (index > this.cellLength - 1) {\r\n            return;\r\n        }\r\n\r\n        if (index > this.counter) {\r\n            let length = index - this.counter;\r\n            this.next(length);\r\n        }\r\n\r\n        if (index < this.counter) {\r\n            let length = this.counter - index;\r\n            this.prev(length);\r\n        }\r\n    }\r\n\r\n    getPreliminaryCounter() {\r\n        if (this.direction === 'left') {\r\n            return this.counter + this.slideLength;\r\n        }\r\n\r\n        if (this.direction === 'right') {\r\n            return this.counter - this.slideLength;\r\n        }\r\n    }\r\n\r\n    /*  \r\n     * Limits the length of the slide during calls to the next() and prev() \r\n     * methods if the specified position is outside the cell length \r\n     */\r\n    limitSlideLength(slideLength: number) {\r\n        if (slideLength > 1) {\r\n            for (var i = 0; i < slideLength; i++) {\r\n                let newCounter = this.counter + (slideLength - i);\r\n\r\n                if (!this.isSlidesEnd(newCounter)) {\r\n                    slideLength = slideLength - i;\r\n                    this.isSlideLengthLimited = i > 0;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return slideLength;\r\n    }\r\n\r\n    /* Offset the container to show the last cell completely */\r\n    getPositionCorrection(counter) {\r\n        let correction = 0;\r\n        let isLastSlide = this.isLastSlide(counter);\r\n\r\n        if (this.carouselProperties.loop || this.direction === \"right\") {\r\n            return 0;\r\n        }\r\n\r\n        if (this.isSlideLengthLimited || isLastSlide) {\r\n            let cellsWidth = this.cells.cellLengthInLightDOMMode * this.fullCellWidth;\r\n\r\n            if (this.visibleWidth < cellsWidth) {\r\n                correction = -(this.visibleCellsCount * this.fullCellWidth - this.visibleWidth - this.margin);\r\n            }\r\n\r\n            if (correction >= -this.margin) {\r\n                correction = 0;\r\n            }\r\n        }\r\n\r\n        return correction;\r\n    }\r\n\r\n    getSlideLength(distanceAbs) {\r\n        let isLastSlide = this.isLastSlide(this.counter);\r\n\r\n        /* If the last cell does not fit entirely, then the \r\n         * length of the swipe to the left, from the extreme \r\n         * right position, may be shorter than usual. \r\n         */\r\n        if (isLastSlide && this.direction === \"right\") {\r\n            distanceAbs = distanceAbs + this.visibleWidth % this.fullCellWidth;\r\n        }\r\n\r\n        let length = Math.floor(distanceAbs / this.fullCellWidth);\r\n\r\n        if (distanceAbs % this.fullCellWidth >= this.minSwipeDistance) {\r\n            length++;\r\n        }\r\n\r\n        return length;\r\n    }\r\n\r\n    getDistanceAbs() {\r\n        return Math.abs(this.initialPositionX - this.currentPositionX);\r\n    }\r\n\r\n    getDirection() {\r\n        const direction = Math.sign(this.initialPositionX - this.currentPositionX);\r\n\r\n        if (direction === -1) {\r\n            return 'right';\r\n        }\r\n        if (direction === 1) {\r\n            return 'left';\r\n        }\r\n    }\r\n\r\n    isSlidesEnd(counter: number) {\r\n        let margin = this.visibleCellsOverflowContainer ? 1 : 0;\r\n        let imageLength = this.images ? this.images.length : this.cells.cellLength;\r\n\r\n        if (this.carouselProperties.loop) {\r\n            return false;\r\n        } else {\r\n            return (imageLength - counter + margin) < this.visibleCellsCount;\r\n        }\r\n    }\r\n\r\n    isLastSlide(counter: number) {\r\n        return this.isSlidesEnd(counter + 1)\r\n    }\r\n\r\n    setCounter() {\r\n        if (this.direction === 'left') {\r\n            this.counter = this.counter + this.slideLength;\r\n        }\r\n\r\n        if (this.direction === 'right') {\r\n            this.counter = this.counter - this.slideLength;\r\n        }\r\n    }\r\n\r\n    getPositionByIndex(_counter) {\r\n        let correction = this.getPositionCorrection(this.counter + this.slideLength);\r\n        let position;\r\n\r\n        if (correction !== 0) {\r\n            correction = correction + this.fullCellWidth\r\n        }\r\n\r\n        if (this.direction === 'right') {\r\n            correction = 0;\r\n        }\r\n\r\n        if (this.isLightDOM && this.isLightDOMMode(_counter) ||\r\n            this.isLightDOM && this.ifLeftDOMModeAtEnd(_counter)) {\r\n\r\n            let initialPosition = this.getPositionWithoutCorrection(this.initialPositionX);\r\n            let counterDifference = _counter - this.counter;\r\n            position = initialPosition - ((counterDifference * this.fullCellWidth) - correction);\r\n        } else {\r\n            position = -((_counter * this.fullCellWidth) - correction);\r\n        }\r\n\r\n        position = this.provideSafePosition(position);\r\n\r\n        return position;\r\n    }\r\n\r\n    provideSafePosition(position) {\r\n        const endPosition = this.container.getEndPosition();\r\n\r\n        if (this.direction === 'left') {\r\n            if (position > 0) {\r\n                position = 0;\r\n            }\r\n        }\r\n\r\n        if (this.direction === 'right') {\r\n            if (position < endPosition) {\r\n                position = endPosition;\r\n            }\r\n        }\r\n\r\n        return position;\r\n    }\r\n\r\n    getPositionWithoutCorrection(value) {\r\n        let remainder = value % this.fullCellWidth;\r\n\r\n        if (remainder !== 0) {\r\n            return value - (this.fullCellWidth + remainder);\r\n        } else {\r\n            return value;\r\n        }\r\n    }\r\n\r\n    isNextArrowDisabled() {\r\n        return this.isLastSlide(this.counter);\r\n    }\r\n\r\n    isPrevArrowDisabled() {\r\n        return this.counter === 0;\r\n    }\r\n\r\n    alignContainerFast() {\r\n        if (this.isLightDOMMode(this.counter)) {\r\n            let positionX = this.fixedContainerPosition;\r\n            this.container.transformPositionX(positionX, 0);\r\n\r\n            this.cells.setCounter(this.counter);\r\n            this.cells.lineUp();\r\n        } else if (this.ifLeftDOMModeToBeginning(this.counter)) {\r\n            /* If we have already exited the light DOM mode but \r\n             * the cells are still out of place \r\n             */\r\n            if (this.cells.ifSequenceOfCellsIsChanged()) {\r\n                let positionX = -(this.counter * this.fullCellWidth);\r\n                this.container.transformPositionX(positionX, 0);\r\n\r\n                this.cells.setCounter(this.counter);\r\n                this.cells.lineUp();\r\n            }\r\n        } else if (this.ifLeftDOMModeAtEnd(this.counter)) {\r\n            let containerPositionX = this.container.getCurrentPositionX();\r\n            let containerWidth = this.container.getWidth();\r\n            this.visibleWidth;\r\n\r\n            if (this.isLastSlide(this.counter) &&\r\n                containerWidth + containerPositionX >= this.visibleWidth) {\r\n                return;\r\n            }\r\n\r\n            let correction = this.getPositionCorrection(this.counter);\r\n\r\n            if (correction !== 0) {\r\n                correction = correction + this.fullCellWidth\r\n            }\r\n\r\n            if (this.direction === 'right') {\r\n                correction = 0;\r\n            }\r\n\r\n            let positionX = this.fixedContainerPosition + correction;\r\n\r\n            this.container.transformPositionX(positionX, 0);\r\n            this.cells.setCounter(this.counter);\r\n            this.cells.lineUp();\r\n        }\r\n    }\r\n\r\n    isLightDOMMode(counter) {\r\n        let flag;\r\n        let remainderOfCells = this.images.length - this.overflowCellsLimit - this.visibleCellsCount;\r\n\r\n        if (!this.isLightDOM) {\r\n            return false;\r\n        }\r\n\r\n        if (counter > this.overflowCellsLimit && this.direction === \"left\" &&\r\n            counter <= remainderOfCells) {\r\n            flag = true;\r\n        }\r\n\r\n        if (counter >= this.overflowCellsLimit && this.direction === \"right\" &&\r\n            counter < remainderOfCells) {\r\n            flag = true;\r\n        }\r\n\r\n        if (this.counter > this.overflowCellsLimit && this.direction === \"left\" &&\r\n            this.counter <= remainderOfCells) {\r\n            flag = true;\r\n        }\r\n\r\n        if (this.counter >= this.overflowCellsLimit && this.direction === \"right\" &&\r\n            this.counter < remainderOfCells) {\r\n            flag = true;\r\n        }\r\n\r\n        return flag;\r\n    }\r\n\r\n    ifLeftDOMModeAtEnd(counter) {\r\n        let flag;\r\n        let remainderOfCells = this.images.length - this.overflowCellsLimit - this.visibleCellsCount;\r\n\r\n        if (counter >= remainderOfCells) {\r\n            flag = true;\r\n        }\r\n\r\n        if (this.counter >= remainderOfCells) {\r\n            flag = true;\r\n        }\r\n\r\n        return flag;\r\n    }\r\n\r\n    ifLeftDOMModeToBeginning(counter) {\r\n        let flag;\r\n\r\n        if (counter <= this.overflowCellsLimit) {\r\n            flag = true;\r\n        }\r\n\r\n        if (this.counter <= this.overflowCellsLimit) {\r\n            flag = true;\r\n        }\r\n\r\n        return flag;\r\n    }\r\n}","import {Properties as CarouselProperties} from './interfaces';\r\n\r\nexport class Utils {\r\n\r\n    get images() {\r\n        return this.carouselProperties.images;\r\n    }\r\n\r\n    get overflowCellsLimit() {\r\n        if (this.images && this.isImagesLessCellLimit) {\r\n            return Math.floor((this.images.length - this.visibleCellsCount) / 2);\r\n        } else {\r\n            return this.carouselProperties.overflowCellsLimit;\r\n        }\r\n    }\r\n\r\n    get isImagesLessCellLimit() {\r\n        return this.carouselProperties.overflowCellsLimit * 2 + this.visibleCellsCount > this.images.length;\r\n    }\r\n\r\n    get visibleCellsCount() {\r\n        return Math.ceil(this.visibleWidth / this.fullCellWidth);\r\n    }\r\n\r\n    get fullCellWidth() {\r\n        return this.carouselProperties.cellWidth + this.carouselProperties.margin;\r\n    }\r\n\r\n    get visibleWidth() {\r\n        return this.carouselProperties.visibleWidth || this.carouselProperties.cellsElement.parentElement.clientWidth;\r\n    }\r\n\r\n    constructor(private carouselProperties: CarouselProperties) {\r\n\r\n    }\r\n\r\n    getStartX(event: any) {\r\n        const touches = event.touches;\r\n        const carouselElementPosition = this.getCarouselElementPosition()['left'];\r\n        let startX;\r\n\r\n        if (touches) {\r\n            startX = touches[0].clientX - carouselElementPosition;\r\n        } else {\r\n            startX = event.clientX - carouselElementPosition;\r\n        }\r\n\r\n        return startX;\r\n    }\r\n\r\n    getMoveX(event: any) {\r\n        const touches = event.touches;\r\n        const carouselElementPositionX = this.getCarouselElementPosition()['left'];\r\n\r\n        if (touches) {\r\n            return touches[0].clientX - carouselElementPositionX;\r\n        } else {\r\n            return event.clientX - carouselElementPositionX;\r\n        }\r\n    }\r\n\r\n    getCarouselElementPosition() {\r\n        return this.carouselProperties.hostElement.getBoundingClientRect();\r\n    }\r\n}","import {ChangeDetectorRef, Component, ElementRef, ViewChild, EventEmitter, HostBinding, HostListener, Input, Output, OnDestroy, SimpleChanges} from '@angular/core';\n\nimport {Images} from './interfaces';\nimport {Touches} from './touches';\nimport {Carousel} from './carousel';\nimport {Container} from './container';\nimport {Cells} from './cells';\nimport {Slide} from './slide';\nimport {Utils} from './utils';\n\n\n@Component({\n    selector: 'carousel, [carousel]',\n    templateUrl: './carousel.component.html',\n    styleUrls: ['./carousel.component.sass']\n})\n\nexport class CarouselComponent implements OnDestroy {\n    carousel;\n    container;\n    utils;\n    cells;\n    slide;\n    _id: string;\n    _images: Images;\n    touches: any;\n    landscapeMode: any;\n    minTimeout = 30;\n    isVideoPlaying: boolean;\n    _isCounter: boolean;\n    _width: number;\n    _cellWidth: number | '100%' = 200;\n    _loop: boolean = false;\n    _lightDOM: boolean = false;\n    isMoving: boolean;\n    isNgContent: boolean;\n    cellLength: number;\n    dotsArr: any;\n\n    get isContainerLocked() {\n        return this.carousel.isContainerLocked;\n    }\n\n    get slideCounter() {\n        return this.carousel.slideCounter;\n    }\n\n    get lapCounter() {\n        return this.carousel.lapCounter;\n    }\n\n    get isLandscape() {\n        return window.innerWidth > window.innerHeight;\n    }\n\n    get isSafari(): any {\n        const ua = navigator.userAgent.toLowerCase();\n        if (ua.indexOf('safari') !== -1) {\n            return !(ua.indexOf('chrome') > -1);\n        }\n    }\n\n    get counter() {\n        let counter;\n\n        if (this.loop) {\n            counter = this.slideCounter % this.cellLength;\n        } else {\n            counter = this.slideCounter;\n        }\n\n        return counter + 1 + this.counterSeparator + this.cellLength;\n    }\n\n    get cellsElement() {\n        return this.elementRef.nativeElement.querySelector('.carousel-cells');\n    }\n\n    get isArrows() {\n        return this.arrows && !this.freeScroll;\n    }\n\n    get isCounter() {\n        return this._isCounter && this.cellLength > 1;\n    }\n\n    get activeDotIndex() {\n        return this.slideCounter % this.cellLength;\n    }\n\n    get cellLimit() {\n        if (this.carousel) {\n            return this.carousel.cellLimit;\n        }\n    }\n\n    @Output() events: EventEmitter < any > = new EventEmitter < any > ();\n\n    @Input() id: number;\n    @Input() height: number = 200;\n    @Input() width: number;\n    @Input() autoplay: boolean = false;\n    @Input() autoplayInterval: number = 5000;\n    @Input() pauseOnHover: boolean = true;\n    @Input() dots: boolean = false;\n    @Input() borderRadius: number;\n    @Input() margin: number = 10;\n    @Input() objectFit: 'contain' | 'cover' | 'none' = 'cover';\n    @Input() minSwipeDistance: number = 10;\n    @Input() transitionDuration: number = 200;\n    @Input() transitionTimingFunction: 'ease' | 'ease-in' | 'ease-out' | 'ease-in-out' | 'linear' = 'ease-out';\n    @Input() videoProperties: any;\n    @Input() counterSeparator: string = \" / \";\n    @Input() overflowCellsLimit: number = 3;\n    @Input() listeners: 'auto' | 'mouse and touch' = 'mouse and touch';\n    @Input() cellsToShow: number;\n    @Input() cellsToScroll: number = 1;\n    @Input() freeScroll: boolean = false;\n    @Input() arrows: boolean = true;\n    @Input() arrowsOutside: boolean;\n    @Input() arrowsTheme: 'light' | 'dark' = 'light';\n\n    @Input()\n    set images(images: Images & any) {\n        this._images = images;\n    }\n    get images() {\n        return this._images;\n    }\n\n    @Input('cellWidth') set cellWidth(value: number | '100%') {\n        if (value) {\n            this._cellWidth = value;\n        }\n    }\n\n    @Input('counter') set isCounter(value: boolean) {\n        if (value) {\n            this._isCounter = value;\n        }\n    }\n\n    @Input('loop') set loop(value: boolean) {\n        if (value) {\n            this._loop = value;\n        }\n    }\n\n    get loop() {\n        if (this.images) {\n            return this._loop;\n        } else {\n            return false;\n        }\n    }\n\n    @Input('lightDOM') set lightDOM(value: boolean) {\n        if (value) {\n            this._lightDOM = value;\n        }\n    }\n\n    get lightDOM() {\n        if (this.images) {\n            return this._lightDOM;\n        } else {\n            return false;\n        }\n    }\n\n    @HostBinding('class.carousel') hostClassCarousel: boolean = true;\n    @HostBinding('style.height') hostStyleHeight: string;\n    @HostBinding('style.width') hostStyleWidth: string;\n\n    @HostListener('window:resize', ['$event'])\n    onWindowResize(event: any) {\n        this.landscapeMode = this.isLandscape;\n        this.ref.detectChanges();\n\n        this.initCarousel();\n        this.carousel.lineUpCells();\n    }\n\n    @HostListener('mousemove', ['$event'])\n    onMousemove(event: MouseEvent) {\n        if (this.autoplay && this.pauseOnHover) {\n            this.carousel.stopAutoplay();\n        }\n    }\n\n    @HostListener('mouseleave', ['$event'])\n    onMouseleave(event: MouseEvent) {\n        if (this.autoplay && this.pauseOnHover) {\n            this.carousel.autoplay();\n        }\n    }\n\n    constructor(\n        private elementRef: ElementRef,\n        private ref: ChangeDetectorRef) {\n\n    }\n\n    ngOnInit() {\n        this.isNgContent = this.cellsElement.children.length > 0;\n\n        this.touches = new Touches({\n            element: this.cellsElement,\n            listeners: this.listeners,\n            mouseListeners: {\n                \"mousedown\": \"handleMousedown\",\n                \"mouseup\": \"handleMouseup\"\n            }\n        });\n\n        this.touches.on('touchstart', this.handleTouchstart);\n        this.touches.on('horizontal-swipe', this.handleHorizontalSwipe);\n        this.touches.on('touchend', this.handleTouchend);\n        this.touches.on('mousedown', this.handleTouchstart);\n        this.touches.on('mouseup', this.handleTouchend);\n        this.touches.on('tap', this.handleTap);\n\n        this.setDimensions();\n    }\n\n    ngAfterViewInit() {\n        this.initCarousel();\n\n        if (this.autoplay) {\n            this.carousel.autoplay();\n        }\n\n        this.cellLength = this.getCellLength();\n        this.dotsArr = Array(this.cellLength).fill(1);\n        this.ref.detectChanges();\n        this.carousel.lineUpCells();\n\n        /* Start detecting changes in the DOM tree */\n        this.detectDomChanges();\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.width || changes.height || changes.images) {\n            this.setDimensions();\n            this.initCarousel();\n            this.carousel.lineUpCells();\n            this.ref.detectChanges();\n        }\n    }\n\n    ngOnDestroy() {\n        this.touches.destroy();\n        //this.carousel.destroy();\n    }\n\n    initCarousel() {\n        let carouselProperties = {\n            id: this.id,\n            cellsElement: this.elementRef.nativeElement.querySelector('.carousel-cells'),\n            hostElement: this.elementRef.nativeElement,\n            images: this.images,\n            cellWidth: this.getCellWidth(),\n            loop: this.loop,\n            autoplayInterval: this.autoplayInterval,\n            overflowCellsLimit: this.overflowCellsLimit,\n            visibleWidth: this.width,\n            margin: this.margin,\n            minSwipeDistance: this.minSwipeDistance,\n            transitionDuration: this.transitionDuration,\n            transitionTimingFunction: this.transitionTimingFunction,\n            videoProperties: this.videoProperties,\n            eventHandler: this.events,\n            freeScroll: this.freeScroll,\n            lightDOM: this.lightDOM\n        };\n\n        this.utils = new Utils(carouselProperties);\n        this.cells = new Cells(carouselProperties, this.utils);\n        this.container = new Container(carouselProperties, this.utils, this.cells);\n        this.slide = new Slide(carouselProperties, this.utils, this.cells, this.container);\n        this.carousel = new Carousel(carouselProperties, this.utils, this.cells, this.container, this.slide);\n    }\n\n    detectDomChanges() {\n        const observer = new MutationObserver((mutations) => {\n            this.onDomChanges();\n        });\n\n        var config = {\n            attributes: true,\n            childList: true,\n            characterData: true\n        };\n        observer.observe(this.elementRef.nativeElement, config);\n    }\n\n    onDomChanges() {\n        this.cellLength = this.getCellLength();\n        this.carousel.lineUpCells();\n        this.ref.detectChanges();\n    }\n\n    setDimensions() {\n        this.hostStyleHeight = this.height + 'px';\n        this.hostStyleWidth = this.width + 'px';\n    }\n\n    getImage(index) {\n        return this.carousel.getImage(index);\n    }\n\n    handleTouchstart = (event: any) => {\n        //event.preventDefault();\n        this.touches.addEventListeners(\"mousemove\", \"handleMousemove\");\n        this.carousel.handleTouchstart(event);\n        this.isMoving = true;\n    }\n\n    handleHorizontalSwipe = (event: any) => {\n        event.preventDefault();\n        this.carousel.handleHorizontalSwipe(event);\n    }\n\n    handleTouchend = (event: any) => {\n        const touches = event.touches;\n        this.carousel.handleTouchend(event);\n        this.touches.removeEventListeners(\"mousemove\", \"handleMousemove\");\n        this.isMoving = false;\n    }\n\n    handleTap = (event: any) => {\n        let outboundEvent: any = {\n            name: 'click'\n        }\n        let nodes = Array.prototype.slice.call(this.cellsElement.children);\n        let cellElement = event.srcElement.closest(\".carousel-cell\");\n        const i = nodes.indexOf(cellElement);\n        const cellIndex = nodes.indexOf(cellElement);\n\n        if (this.images) {\n            //outboundEvent.fileIndex = this.carousel.getFileIndex(i);\n            //outboundEvent.file = this.carousel.getFile(cellIndex);\n        } else {\n            outboundEvent.cellIndex = cellIndex;\n        }\n    }\n\n    handleTransitionendCellContainer(event) {\n        this.carousel.handleTransitionend();\n    }\n\n    toggleVideo(video) {\n        event.preventDefault();\n        if (this.videoProperties.noPlay) {\n            return;\n        }\n\n        if (video.paused) {\n            video.play();\n            this.isVideoPlaying = true;\n        } else {\n            video.pause();\n            this.isVideoPlaying = false;\n        }\n\n        this.ref.detectChanges();\n    }\n\n    getCellWidth() {\n        let elementWidth = this.elementRef.nativeElement.clientWidth;\n\n        if (this.cellsToShow) {\n            let margin = this.cellsToShow > 1 ? this.margin : 0;\n            let totalMargin = margin * (this.cellsToShow - 1);\n            return (elementWidth - totalMargin) / this.cellsToShow;\n        }\n\n        if (this._cellWidth === '100%') {\n            return elementWidth;\n        } else {\n            return this._cellWidth;\n        }\n    }\n\n    next() {\n        this.carousel.next(this.cellsToScroll);\n        this.carousel.stopAutoplay();\n    }\n\n    prev() {\n        this.carousel.prev(this.cellsToScroll);\n        this.carousel.stopAutoplay();\n    }\n\n    isNextArrowDisabled() {\n        if (this.carousel) {\n            return this.carousel.isNextArrowDisabled();\n        }\n    }\n\n    isPrevArrowDisabled() {\n        if (this.carousel) {\n            return this.carousel.isPrevArrowDisabled();\n        }\n    }\n\n    getCellLength() {\n        if (this.images) {\n            return this.images.length;\n        } else {\n            return this.cellsElement.children.length;\n        }\n    }\n}","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {CarouselComponent} from './carousel.component';\n\n@NgModule({\n    declarations: [\n        CarouselComponent\n    ],\n    imports: [\n        CommonModule\n    ],\n    exports: [\n        CarouselComponent\n    ],\n    providers: [\n\n    ],\n    bootstrap: [\n        \n    ],\n    entryComponents: [\n        CarouselComponent\n    ]\n})\nexport class IvyCarouselModule { }\n"]}