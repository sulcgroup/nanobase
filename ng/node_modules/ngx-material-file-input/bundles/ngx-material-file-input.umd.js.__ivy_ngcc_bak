(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/cdk/a11y'), require('@angular/forms'), require('@angular/material/core'), require('@angular/material/form-field'), require('@angular/cdk/coercion')) :
    typeof define === 'function' && define.amd ? define('ngx-material-file-input', ['exports', '@angular/core', '@angular/cdk/a11y', '@angular/forms', '@angular/material/core', '@angular/material/form-field', '@angular/cdk/coercion'], factory) :
    (global = global || self, factory(global['ngx-material-file-input'] = {}, global.ng.core, global.ng.cdk.a11y, global.ng.forms, global.ng.material.core, global.ng.material['form-field'], global.ng.cdk.coercion));
}(this, (function (exports, core, a11y, forms, core$1, formField, coercion) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __exportStar(m, exports) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }

    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m) return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    };

    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }

    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };

    function __importStar(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result.default = mod;
        return result;
    }

    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }

    /**
     * Optional token to provide custom configuration to the module
     */
    var NGX_MAT_FILE_INPUT_CONFIG = new core.InjectionToken('ngx-mat-file-input.config');
    /**
     * Provide additional configuration to dynamically customize the module injection
     */
    var FileInputConfig = /** @class */ (function () {
        function FileInputConfig() {
        }
        return FileInputConfig;
    }());

    /**
     * The files to be uploaded
     */
    var FileInput = /** @class */ (function () {
        function FileInput(_files, delimiter) {
            if (delimiter === void 0) { delimiter = ', '; }
            this._files = _files;
            this.delimiter = delimiter;
            this._fileNames = (this._files || []).map(function (f) { return f.name; }).join(delimiter);
        }
        Object.defineProperty(FileInput.prototype, "files", {
            get: function () {
                return this._files || [];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FileInput.prototype, "fileNames", {
            get: function () {
                return this._fileNames;
            },
            enumerable: true,
            configurable: true
        });
        return FileInput;
    }());

    // Boilerplate for applying mixins to FileInput
    /** @docs-private */
    var FileInputBase = /** @class */ (function () {
        function FileInputBase(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {
            this._defaultErrorStateMatcher = _defaultErrorStateMatcher;
            this._parentForm = _parentForm;
            this._parentFormGroup = _parentFormGroup;
            this.ngControl = ngControl;
        }
        return FileInputBase;
    }());
    /**
     * Allows to use a custom ErrorStateMatcher with the file-input component
     */
    var FileInputMixinBase = core$1.mixinErrorState(FileInputBase);

    var FileInputComponent = /** @class */ (function (_super) {
        __extends(FileInputComponent, _super);
        /**
         * @see https://angular.io/api/forms/ControlValueAccessor
         */
        function FileInputComponent(fm, _elementRef, _renderer, _defaultErrorStateMatcher, ngControl, _parentForm, _parentFormGroup) {
            var _this = _super.call(this, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) || this;
            _this.fm = fm;
            _this._elementRef = _elementRef;
            _this._renderer = _renderer;
            _this._defaultErrorStateMatcher = _defaultErrorStateMatcher;
            _this.ngControl = ngControl;
            _this._parentForm = _parentForm;
            _this._parentFormGroup = _parentFormGroup;
            _this.focused = false;
            _this.controlType = 'file-input';
            _this.autofilled = false;
            _this._required = false;
            _this.accept = null;
            _this.id = "ngx-mat-file-input-" + FileInputComponent_1.nextId++;
            _this.describedBy = '';
            _this._onChange = function (_) { };
            _this._onTouched = function () { };
            if (_this.ngControl != null) {
                _this.ngControl.valueAccessor = _this;
            }
            fm.monitor(_elementRef.nativeElement, true).subscribe(function (origin) {
                _this.focused = !!origin;
                _this.stateChanges.next();
            });
            return _this;
        }
        FileInputComponent_1 = FileInputComponent;
        FileInputComponent.prototype.setDescribedByIds = function (ids) {
            this.describedBy = ids.join(' ');
        };
        Object.defineProperty(FileInputComponent.prototype, "value", {
            get: function () {
                return this.empty ? null : new FileInput(this._elementRef.nativeElement.value || []);
            },
            set: function (fileInput) {
                if (fileInput) {
                    this.writeValue(fileInput);
                    this.stateChanges.next();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FileInputComponent.prototype, "placeholder", {
            get: function () {
                return this._placeholder;
            },
            set: function (plh) {
                this._placeholder = plh;
                this.stateChanges.next();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FileInputComponent.prototype, "empty", {
            /**
             * Whether the current input has files
             */
            get: function () {
                return !this._elementRef.nativeElement.value || this._elementRef.nativeElement.value.length === 0;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FileInputComponent.prototype, "shouldLabelFloat", {
            get: function () {
                return this.focused || !this.empty || this.valuePlaceholder !== undefined;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FileInputComponent.prototype, "required", {
            get: function () {
                return this._required;
            },
            set: function (req) {
                this._required = coercion.coerceBooleanProperty(req);
                this.stateChanges.next();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FileInputComponent.prototype, "isDisabled", {
            get: function () {
                return this.disabled;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FileInputComponent.prototype, "disabled", {
            get: function () {
                return this._elementRef.nativeElement.disabled;
            },
            set: function (dis) {
                this.setDisabledState(coercion.coerceBooleanProperty(dis));
                this.stateChanges.next();
            },
            enumerable: true,
            configurable: true
        });
        FileInputComponent.prototype.onContainerClick = function (event) {
            if (event.target.tagName.toLowerCase() !== 'input' && !this.disabled) {
                this._elementRef.nativeElement.querySelector('input').focus();
                this.focused = true;
                this.open();
            }
        };
        Object.defineProperty(FileInputComponent.prototype, "fileNames", {
            get: function () {
                return this.value ? this.value.fileNames : this.valuePlaceholder;
            },
            enumerable: true,
            configurable: true
        });
        FileInputComponent.prototype.writeValue = function (obj) {
            this._renderer.setProperty(this._elementRef.nativeElement, 'value', obj instanceof FileInput ? obj.files : null);
        };
        FileInputComponent.prototype.registerOnChange = function (fn) {
            this._onChange = fn;
        };
        FileInputComponent.prototype.registerOnTouched = function (fn) {
            this._onTouched = fn;
        };
        /**
         * Remove all files from the file input component
         * @param [event] optional event that may have triggered the clear action
         */
        FileInputComponent.prototype.clear = function (event) {
            if (event) {
                event.preventDefault();
                event.stopPropagation();
            }
            this.value = new FileInput([]);
            this._elementRef.nativeElement.querySelector('input').value = null;
            this._onChange(this.value);
        };
        FileInputComponent.prototype.change = function (event) {
            var fileList = event.target.files;
            var fileArray = [];
            if (fileList) {
                for (var i = 0; i < fileList.length; i++) {
                    fileArray.push(fileList[i]);
                }
            }
            this.value = new FileInput(fileArray);
            this._onChange(this.value);
        };
        FileInputComponent.prototype.blur = function () {
            this.focused = false;
            this._onTouched();
        };
        FileInputComponent.prototype.setDisabledState = function (isDisabled) {
            this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
        };
        FileInputComponent.prototype.ngOnInit = function () {
            this.multiple = coercion.coerceBooleanProperty(this.multiple);
        };
        FileInputComponent.prototype.open = function () {
            if (!this.disabled) {
                this._elementRef.nativeElement.querySelector('input').click();
            }
        };
        FileInputComponent.prototype.ngOnDestroy = function () {
            this.stateChanges.complete();
            this.fm.stopMonitoring(this._elementRef.nativeElement);
        };
        FileInputComponent.prototype.ngDoCheck = function () {
            if (this.ngControl) {
                // We need to re-evaluate this on every change detection cycle, because there are some
                // error triggers that we can't subscribe to (e.g. parent form submissions). This means
                // that whatever logic is in here has to be super lean or we risk destroying the performance.
                this.updateErrorState();
            }
        };
        var FileInputComponent_1;
        FileInputComponent.nextId = 0;
        FileInputComponent.ctorParameters = function () { return [
            { type: a11y.FocusMonitor },
            { type: core.ElementRef },
            { type: core.Renderer2 },
            { type: core$1.ErrorStateMatcher },
            { type: forms.NgControl, decorators: [{ type: core.Optional }, { type: core.Self }] },
            { type: forms.NgForm, decorators: [{ type: core.Optional }] },
            { type: forms.FormGroupDirective, decorators: [{ type: core.Optional }] }
        ]; };
        __decorate([
            core.Input()
        ], FileInputComponent.prototype, "autofilled", void 0);
        __decorate([
            core.Input()
        ], FileInputComponent.prototype, "valuePlaceholder", void 0);
        __decorate([
            core.Input()
        ], FileInputComponent.prototype, "multiple", void 0);
        __decorate([
            core.Input()
        ], FileInputComponent.prototype, "accept", void 0);
        __decorate([
            core.Input()
        ], FileInputComponent.prototype, "errorStateMatcher", void 0);
        __decorate([
            core.HostBinding()
        ], FileInputComponent.prototype, "id", void 0);
        __decorate([
            core.HostBinding('attr.aria-describedby')
        ], FileInputComponent.prototype, "describedBy", void 0);
        __decorate([
            core.Input()
        ], FileInputComponent.prototype, "value", null);
        __decorate([
            core.Input()
        ], FileInputComponent.prototype, "placeholder", null);
        __decorate([
            core.HostBinding('class.mat-form-field-should-float')
        ], FileInputComponent.prototype, "shouldLabelFloat", null);
        __decorate([
            core.Input()
        ], FileInputComponent.prototype, "required", null);
        __decorate([
            core.HostBinding('class.file-input-disabled')
        ], FileInputComponent.prototype, "isDisabled", null);
        __decorate([
            core.Input()
        ], FileInputComponent.prototype, "disabled", null);
        __decorate([
            core.HostListener('change', ['$event'])
        ], FileInputComponent.prototype, "change", null);
        __decorate([
            core.HostListener('focusout')
        ], FileInputComponent.prototype, "blur", null);
        FileInputComponent = FileInputComponent_1 = __decorate([
            core.Component({
                // tslint:disable-next-line:component-selector
                selector: 'ngx-mat-file-input',
                template: "<input #input type=\"file\" [attr.multiple]=\"multiple? '' : null\" [attr.accept]=\"accept\">\n<span class=\"filename\" [title]=\"fileNames\">{{ fileNames }}</span>\n",
                providers: [{ provide: formField.MatFormFieldControl, useExisting: FileInputComponent_1 }],
                styles: [":host{display:inline-block;width:100%}:host:not(.file-input-disabled){cursor:pointer}input{width:0;height:0;opacity:0;overflow:hidden;position:absolute;z-index:-1}.filename{display:inline-block;text-overflow:ellipsis;overflow:hidden;width:100%}"]
            }),
            __param(4, core.Optional()),
            __param(4, core.Self()),
            __param(5, core.Optional()),
            __param(6, core.Optional())
        ], FileInputComponent);
        return FileInputComponent;
    }(FileInputMixinBase));

    var ByteFormatPipe = /** @class */ (function () {
        function ByteFormatPipe(config) {
            this.config = config;
            this.unit = config ? config.sizeUnit : 'Byte';
        }
        ByteFormatPipe.prototype.transform = function (value, args) {
            if (parseInt(value, 10) >= 0) {
                value = this.formatBytes(+value, +args);
            }
            return value;
        };
        ByteFormatPipe.prototype.formatBytes = function (bytes, decimals) {
            if (bytes === 0) {
                return '0 ' + this.unit;
            }
            var B = this.unit.charAt(0);
            var k = 1024;
            var dm = decimals || 2;
            var sizes = [this.unit, 'K' + B, 'M' + B, 'G' + B, 'T' + B, 'P' + B, 'E' + B, 'Z' + B, 'Y' + B];
            var i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
        };
        ByteFormatPipe.ctorParameters = function () { return [
            { type: FileInputConfig, decorators: [{ type: core.Optional }, { type: core.Inject, args: [NGX_MAT_FILE_INPUT_CONFIG,] }] }
        ]; };
        ByteFormatPipe = __decorate([
            core.Pipe({
                name: 'byteFormat'
            }),
            __param(0, core.Optional()),
            __param(0, core.Inject(NGX_MAT_FILE_INPUT_CONFIG))
        ], ByteFormatPipe);
        return ByteFormatPipe;
    }());

    var MaterialFileInputModule = /** @class */ (function () {
        function MaterialFileInputModule() {
        }
        MaterialFileInputModule = __decorate([
            core.NgModule({
                declarations: [FileInputComponent, ByteFormatPipe],
                providers: [a11y.FocusMonitor],
                exports: [FileInputComponent, ByteFormatPipe]
            })
        ], MaterialFileInputModule);
        return MaterialFileInputModule;
    }());


    (function (FileValidator) {
        /**
         * Function to control content of files
         *
         * @param bytes max number of bytes allowed
         *
         * @returns
         */
        function maxContentSize(bytes) {
            return function (control) {
                var size = control && control.value ? control.value.files.map(function (f) { return f.size; }).reduce(function (acc, i) { return acc + i; }, 0) : 0;
                var condition = bytes >= size;
                return condition
                    ? null
                    : {
                        maxContentSize: {
                            actualSize: size,
                            maxSize: bytes
                        }
                    };
            };
        }
        FileValidator.maxContentSize = maxContentSize;
    })(exports.FileValidator || (exports.FileValidator = {}));

    exports.ByteFormatPipe = ByteFormatPipe;
    exports.FileInput = FileInput;
    exports.FileInputComponent = FileInputComponent;
    exports.FileInputConfig = FileInputConfig;
    exports.MaterialFileInputModule = MaterialFileInputModule;
    exports.NGX_MAT_FILE_INPUT_CONFIG = NGX_MAT_FILE_INPUT_CONFIG;
    exports.ɵa = FileInputBase;
    exports.ɵb = FileInputMixinBase;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngx-material-file-input.umd.js.map
