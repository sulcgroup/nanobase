import { OnInit, ElementRef, OnDestroy, Renderer2, DoCheck } from '@angular/core';
import { ControlValueAccessor, NgControl, NgForm, FormGroupDirective } from '@angular/forms';
import { ErrorStateMatcher } from '@angular/material/core';
import { MatFormFieldControl } from '@angular/material/form-field';
import { FocusMonitor } from '@angular/cdk/a11y';
import { FileInput } from '../model/file-input.model';
import { FileInputMixinBase } from './file-input-mixin';
import * as ɵngcc0 from '@angular/core';
export declare class FileInputComponent extends FileInputMixinBase implements MatFormFieldControl<FileInput>, ControlValueAccessor, OnInit, OnDestroy, DoCheck {
    private fm;
    private _elementRef;
    private _renderer;
    _defaultErrorStateMatcher: ErrorStateMatcher;
    ngControl: NgControl;
    _parentForm: NgForm;
    _parentFormGroup: FormGroupDirective;
    static nextId: number;
    focused: boolean;
    controlType: string;
    autofilled: boolean;
    private _placeholder;
    private _required;
    valuePlaceholder: string;
    multiple: boolean;
    accept: string | null;
    errorStateMatcher: ErrorStateMatcher;
    id: string;
    describedBy: string;
    setDescribedByIds(ids: string[]): void;
    get value(): FileInput | null;
    set value(fileInput: FileInput | null);
    get placeholder(): string;
    set placeholder(plh: string);
    /**
     * Whether the current input has files
     */
    get empty(): boolean;
    get shouldLabelFloat(): boolean;
    get required(): boolean;
    set required(req: boolean);
    get isDisabled(): boolean;
    get disabled(): boolean;
    set disabled(dis: boolean);
    onContainerClick(event: MouseEvent): void;
    /**
     * @see https://angular.io/api/forms/ControlValueAccessor
     */
    constructor(fm: FocusMonitor, _elementRef: ElementRef, _renderer: Renderer2, _defaultErrorStateMatcher: ErrorStateMatcher, ngControl: NgControl, _parentForm: NgForm, _parentFormGroup: FormGroupDirective);
    private _onChange;
    private _onTouched;
    get fileNames(): string;
    writeValue(obj: FileInput | null): void;
    registerOnChange(fn: (_: any) => void): void;
    registerOnTouched(fn: any): void;
    /**
     * Remove all files from the file input component
     * @param [event] optional event that may have triggered the clear action
     */
    clear(event?: Event): void;
    change(event: Event): void;
    blur(): void;
    setDisabledState(isDisabled: boolean): void;
    ngOnInit(): void;
    open(): void;
    ngOnDestroy(): void;
    ngDoCheck(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<FileInputComponent, [null, null, null, null, { optional: true; self: true; }, { optional: true; }, { optional: true; }]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<FileInputComponent, "ngx-mat-file-input", never, { "autofilled": "autofilled"; "accept": "accept"; "value": "value"; "placeholder": "placeholder"; "required": "required"; "disabled": "disabled"; "multiple": "multiple"; "valuePlaceholder": "valuePlaceholder"; "errorStateMatcher": "errorStateMatcher"; }, {}, never, never>;
}

//# sourceMappingURL=file-input.component.d.ts.map