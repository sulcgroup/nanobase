import { InjectionToken, ElementRef, Renderer2, Optional, Self, Input, HostBinding, HostListener, Component, Inject, Pipe, NgModule } from '@angular/core';
import { __decorate, __param } from 'tslib';
import { FocusMonitor } from '@angular/cdk/a11y';
import { NgControl, NgForm, FormGroupDirective } from '@angular/forms';
import { mixinErrorState, ErrorStateMatcher } from '@angular/material/core';
import { MatFormFieldControl } from '@angular/material/form-field';
import { coerceBooleanProperty } from '@angular/cdk/coercion';

/**
 * Optional token to provide custom configuration to the module
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/cdk/a11y';
import * as ɵngcc2 from '@angular/material/core';
import * as ɵngcc3 from '@angular/forms';
const NGX_MAT_FILE_INPUT_CONFIG = new InjectionToken('ngx-mat-file-input.config');
/**
 * Provide additional configuration to dynamically customize the module injection
 */
class FileInputConfig {
}

/**
 * The files to be uploaded
 */
class FileInput {
    constructor(_files, delimiter = ', ') {
        this._files = _files;
        this.delimiter = delimiter;
        this._fileNames = (this._files || []).map((f) => f.name).join(delimiter);
    }
    get files() {
        return this._files || [];
    }
    get fileNames() {
        return this._fileNames;
    }
}

// Boilerplate for applying mixins to FileInput
/** @docs-private */
class FileInputBase {
    constructor(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {
        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;
        this._parentForm = _parentForm;
        this._parentFormGroup = _parentFormGroup;
        this.ngControl = ngControl;
    }
}
/**
 * Allows to use a custom ErrorStateMatcher with the file-input component
 */
const FileInputMixinBase = mixinErrorState(FileInputBase);

var FileInputComponent_1;
let FileInputComponent = FileInputComponent_1 = class FileInputComponent extends FileInputMixinBase {
    /**
     * @see https://angular.io/api/forms/ControlValueAccessor
     */
    constructor(fm, _elementRef, _renderer, _defaultErrorStateMatcher, ngControl, _parentForm, _parentFormGroup) {
        super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);
        this.fm = fm;
        this._elementRef = _elementRef;
        this._renderer = _renderer;
        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;
        this.ngControl = ngControl;
        this._parentForm = _parentForm;
        this._parentFormGroup = _parentFormGroup;
        this.focused = false;
        this.controlType = 'file-input';
        this.autofilled = false;
        this._required = false;
        this.accept = null;
        this.id = `ngx-mat-file-input-${FileInputComponent_1.nextId++}`;
        this.describedBy = '';
        this._onChange = (_) => { };
        this._onTouched = () => { };
        if (this.ngControl != null) {
            this.ngControl.valueAccessor = this;
        }
        fm.monitor(_elementRef.nativeElement, true).subscribe(origin => {
            this.focused = !!origin;
            this.stateChanges.next();
        });
    }
    setDescribedByIds(ids) {
        this.describedBy = ids.join(' ');
    }
    get value() {
        return this.empty ? null : new FileInput(this._elementRef.nativeElement.value || []);
    }
    set value(fileInput) {
        if (fileInput) {
            this.writeValue(fileInput);
            this.stateChanges.next();
        }
    }
    get placeholder() {
        return this._placeholder;
    }
    set placeholder(plh) {
        this._placeholder = plh;
        this.stateChanges.next();
    }
    /**
     * Whether the current input has files
     */
    get empty() {
        return !this._elementRef.nativeElement.value || this._elementRef.nativeElement.value.length === 0;
    }
    get shouldLabelFloat() {
        return this.focused || !this.empty || this.valuePlaceholder !== undefined;
    }
    get required() {
        return this._required;
    }
    set required(req) {
        this._required = coerceBooleanProperty(req);
        this.stateChanges.next();
    }
    get isDisabled() {
        return this.disabled;
    }
    get disabled() {
        return this._elementRef.nativeElement.disabled;
    }
    set disabled(dis) {
        this.setDisabledState(coerceBooleanProperty(dis));
        this.stateChanges.next();
    }
    onContainerClick(event) {
        if (event.target.tagName.toLowerCase() !== 'input' && !this.disabled) {
            this._elementRef.nativeElement.querySelector('input').focus();
            this.focused = true;
            this.open();
        }
    }
    get fileNames() {
        return this.value ? this.value.fileNames : this.valuePlaceholder;
    }
    writeValue(obj) {
        this._renderer.setProperty(this._elementRef.nativeElement, 'value', obj instanceof FileInput ? obj.files : null);
    }
    registerOnChange(fn) {
        this._onChange = fn;
    }
    registerOnTouched(fn) {
        this._onTouched = fn;
    }
    /**
     * Remove all files from the file input component
     * @param [event] optional event that may have triggered the clear action
     */
    clear(event) {
        if (event) {
            event.preventDefault();
            event.stopPropagation();
        }
        this.value = new FileInput([]);
        this._elementRef.nativeElement.querySelector('input').value = null;
        this._onChange(this.value);
    }
    change(event) {
        const fileList = event.target.files;
        const fileArray = [];
        if (fileList) {
            for (let i = 0; i < fileList.length; i++) {
                fileArray.push(fileList[i]);
            }
        }
        this.value = new FileInput(fileArray);
        this._onChange(this.value);
    }
    blur() {
        this.focused = false;
        this._onTouched();
    }
    setDisabledState(isDisabled) {
        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
    }
    ngOnInit() {
        this.multiple = coerceBooleanProperty(this.multiple);
    }
    open() {
        if (!this.disabled) {
            this._elementRef.nativeElement.querySelector('input').click();
        }
    }
    ngOnDestroy() {
        this.stateChanges.complete();
        this.fm.stopMonitoring(this._elementRef.nativeElement);
    }
    ngDoCheck() {
        if (this.ngControl) {
            // We need to re-evaluate this on every change detection cycle, because there are some
            // error triggers that we can't subscribe to (e.g. parent form submissions). This means
            // that whatever logic is in here has to be super lean or we risk destroying the performance.
            this.updateErrorState();
        }
    }
};
FileInputComponent.ɵfac = function FileInputComponent_Factory(t) { return new (t || FileInputComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ErrorStateMatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.NgControl, 10), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.NgForm, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.FormGroupDirective, 8)); };
FileInputComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: FileInputComponent, selectors: [["ngx-mat-file-input"]], hostVars: 6, hostBindings: function FileInputComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("change", function FileInputComponent_change_HostBindingHandler($event) { return ctx.change($event); })("focusout", function FileInputComponent_focusout_HostBindingHandler() { return ctx.blur(); });
    } if (rf & 2) {
        ɵngcc0.ɵɵhostProperty("id", ctx.id);
        ɵngcc0.ɵɵattribute("aria-describedby", ctx.describedBy);
        ɵngcc0.ɵɵclassProp("mat-form-field-should-float", ctx.shouldLabelFloat)("file-input-disabled", ctx.isDisabled);
    } }, inputs: { autofilled: "autofilled", accept: "accept", value: "value", placeholder: "placeholder", required: "required", disabled: "disabled", multiple: "multiple", valuePlaceholder: "valuePlaceholder", errorStateMatcher: "errorStateMatcher" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: MatFormFieldControl, useExisting: FileInputComponent_1 }]), ɵngcc0.ɵɵInheritDefinitionFeature], decls: 4, vars: 4, consts: [["type", "file"], ["input", ""], [1, "filename", 3, "title"]], template: function FileInputComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelement(0, "input", 0, 1);
        ɵngcc0.ɵɵelementStart(2, "span", 2);
        ɵngcc0.ɵɵtext(3);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("multiple", ctx.multiple ? "" : null)("accept", ctx.accept);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("title", ctx.fileNames);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate(ctx.fileNames);
    } }, styles: ["[_nghost-%COMP%]{display:inline-block;width:100%}[_nghost-%COMP%]:not(.file-input-disabled){cursor:pointer}input[_ngcontent-%COMP%]{width:0;height:0;opacity:0;overflow:hidden;position:absolute;z-index:-1}.filename[_ngcontent-%COMP%]{display:inline-block;text-overflow:ellipsis;overflow:hidden;width:100%}"] });
FileInputComponent.nextId = 0;
FileInputComponent.ctorParameters = () => [
    { type: FocusMonitor },
    { type: ElementRef },
    { type: Renderer2 },
    { type: ErrorStateMatcher },
    { type: NgControl, decorators: [{ type: Optional }, { type: Self }] },
    { type: NgForm, decorators: [{ type: Optional }] },
    { type: FormGroupDirective, decorators: [{ type: Optional }] }
];
__decorate([
    Input()
], FileInputComponent.prototype, "autofilled", void 0);
__decorate([
    Input()
], FileInputComponent.prototype, "valuePlaceholder", void 0);
__decorate([
    Input()
], FileInputComponent.prototype, "multiple", void 0);
__decorate([
    Input()
], FileInputComponent.prototype, "accept", void 0);
__decorate([
    Input()
], FileInputComponent.prototype, "errorStateMatcher", void 0);
__decorate([
    HostBinding()
], FileInputComponent.prototype, "id", void 0);
__decorate([
    HostBinding('attr.aria-describedby')
], FileInputComponent.prototype, "describedBy", void 0);
__decorate([
    Input()
], FileInputComponent.prototype, "value", null);
__decorate([
    Input()
], FileInputComponent.prototype, "placeholder", null);
__decorate([
    HostBinding('class.mat-form-field-should-float')
], FileInputComponent.prototype, "shouldLabelFloat", null);
__decorate([
    Input()
], FileInputComponent.prototype, "required", null);
__decorate([
    HostBinding('class.file-input-disabled')
], FileInputComponent.prototype, "isDisabled", null);
__decorate([
    Input()
], FileInputComponent.prototype, "disabled", null);
__decorate([
    HostListener('change', ['$event'])
], FileInputComponent.prototype, "change", null);
__decorate([
    HostListener('focusout')
], FileInputComponent.prototype, "blur", null);
FileInputComponent = FileInputComponent_1 = __decorate([ __param(4, Optional()),
    __param(4, Self()),
    __param(5, Optional()),
    __param(6, Optional())
], FileInputComponent);

let ByteFormatPipe = class ByteFormatPipe {
    constructor(config) {
        this.config = config;
        this.unit = config ? config.sizeUnit : 'Byte';
    }
    transform(value, args) {
        if (parseInt(value, 10) >= 0) {
            value = this.formatBytes(+value, +args);
        }
        return value;
    }
    formatBytes(bytes, decimals) {
        if (bytes === 0) {
            return '0 ' + this.unit;
        }
        const B = this.unit.charAt(0);
        const k = 1024;
        const dm = decimals || 2;
        const sizes = [this.unit, 'K' + B, 'M' + B, 'G' + B, 'T' + B, 'P' + B, 'E' + B, 'Z' + B, 'Y' + B];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
    }
};
ByteFormatPipe.ɵfac = function ByteFormatPipe_Factory(t) { return new (t || ByteFormatPipe)(ɵngcc0.ɵɵdirectiveInject(NGX_MAT_FILE_INPUT_CONFIG, 8)); };
ByteFormatPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "byteFormat", type: ByteFormatPipe, pure: true });
ByteFormatPipe.ctorParameters = () => [
    { type: FileInputConfig, decorators: [{ type: Optional }, { type: Inject, args: [NGX_MAT_FILE_INPUT_CONFIG,] }] }
];
ByteFormatPipe = __decorate([ __param(0, Optional()),
    __param(0, Inject(NGX_MAT_FILE_INPUT_CONFIG))
], ByteFormatPipe);

let MaterialFileInputModule = class MaterialFileInputModule {
};
MaterialFileInputModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MaterialFileInputModule });
MaterialFileInputModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MaterialFileInputModule_Factory(t) { return new (t || MaterialFileInputModule)(); }, providers: [FocusMonitor] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FileInputComponent, [{
        type: Component,
        args: [{
                // tslint:disable-next-line:component-selector
                selector: 'ngx-mat-file-input',
                template: "<input #input type=\"file\" [attr.multiple]=\"multiple? '' : null\" [attr.accept]=\"accept\">\n<span class=\"filename\" [title]=\"fileNames\">{{ fileNames }}</span>\n",
                providers: [{ provide: MatFormFieldControl, useExisting: FileInputComponent_1 }],
                styles: [":host{display:inline-block;width:100%}:host:not(.file-input-disabled){cursor:pointer}input{width:0;height:0;opacity:0;overflow:hidden;position:absolute;z-index:-1}.filename{display:inline-block;text-overflow:ellipsis;overflow:hidden;width:100%}"]
            }]
    }], function () { return [{ type: ɵngcc1.FocusMonitor }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc2.ErrorStateMatcher }, { type: ɵngcc3.NgControl, decorators: [{
                type: Optional
            }, {
                type: Self
            }] }, { type: ɵngcc3.NgForm, decorators: [{
                type: Optional
            }] }, { type: ɵngcc3.FormGroupDirective, decorators: [{
                type: Optional
            }] }]; }, { autofilled: [{
            type: Input
        }], accept: [{
            type: Input
        }], id: [{
            type: HostBinding
        }], describedBy: [{
            type: HostBinding,
            args: ['attr.aria-describedby']
        }], value: [{
            type: Input
        }], placeholder: [{
            type: Input
        }], shouldLabelFloat: [{
            type: HostBinding,
            args: ['class.mat-form-field-should-float']
        }], required: [{
            type: Input
        }], isDisabled: [{
            type: HostBinding,
            args: ['class.file-input-disabled']
        }], disabled: [{
            type: Input
        }], change: [{
            type: HostListener,
            args: ['change', ['$event']]
        }], blur: [{
            type: HostListener,
            args: ['focusout']
        }], multiple: [{
            type: Input
        }], valuePlaceholder: [{
            type: Input
        }], errorStateMatcher: [{
            type: Input
        }] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ByteFormatPipe, [{
        type: Pipe,
        args: [{
                name: 'byteFormat'
            }]
    }], function () { return [{ type: FileInputConfig, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [NGX_MAT_FILE_INPUT_CONFIG]
            }] }]; }, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MaterialFileInputModule, { declarations: [FileInputComponent, ByteFormatPipe], exports: [FileInputComponent, ByteFormatPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MaterialFileInputModule, [{
        type: NgModule,
        args: [{
                declarations: [FileInputComponent, ByteFormatPipe],
                providers: [FocusMonitor],
                exports: [FileInputComponent, ByteFormatPipe]
            }]
    }], null, null); })();

var FileValidator;
(function (FileValidator) {
    /**
     * Function to control content of files
     *
     * @param bytes max number of bytes allowed
     *
     * @returns
     */
    function maxContentSize(bytes) {
        return (control) => {
            const size = control && control.value ? control.value.files.map(f => f.size).reduce((acc, i) => acc + i, 0) : 0;
            const condition = bytes >= size;
            return condition
                ? null
                : {
                    maxContentSize: {
                        actualSize: size,
                        maxSize: bytes
                    }
                };
        };
    }
    FileValidator.maxContentSize = maxContentSize;
})(FileValidator || (FileValidator = {}));

/**
 * Generated bundle index. Do not edit.
 */

export { ByteFormatPipe, FileInput, FileInputComponent, FileInputConfig, FileValidator, MaterialFileInputModule, NGX_MAT_FILE_INPUT_CONFIG, FileInputBase as ɵa, FileInputMixinBase as ɵb };

//# sourceMappingURL=ngx-material-file-input.js.map