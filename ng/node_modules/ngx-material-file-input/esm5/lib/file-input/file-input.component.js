import { __decorate, __extends, __param } from "tslib";
import { Component, OnInit, Input, ElementRef, OnDestroy, HostBinding, Renderer2, HostListener, Optional, Self, DoCheck } from '@angular/core';
import { ControlValueAccessor, NgControl, NgForm, FormGroupDirective } from '@angular/forms';
import { ErrorStateMatcher } from '@angular/material/core';
import { MatFormFieldControl } from '@angular/material/form-field';
import { FocusMonitor } from '@angular/cdk/a11y';
import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { FileInput } from '../model/file-input.model';
import { FileInputMixinBase } from './file-input-mixin';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/cdk/a11y';
import * as ɵngcc2 from '@angular/material/core';
import * as ɵngcc3 from '@angular/forms';
var FileInputComponent = /** @class */ (function (_super) {
    __extends(FileInputComponent, _super);
    /**
     * @see https://angular.io/api/forms/ControlValueAccessor
     */
    function FileInputComponent(fm, _elementRef, _renderer, _defaultErrorStateMatcher, ngControl, _parentForm, _parentFormGroup) {
        var _this = _super.call(this, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) || this;
        _this.fm = fm;
        _this._elementRef = _elementRef;
        _this._renderer = _renderer;
        _this._defaultErrorStateMatcher = _defaultErrorStateMatcher;
        _this.ngControl = ngControl;
        _this._parentForm = _parentForm;
        _this._parentFormGroup = _parentFormGroup;
        _this.focused = false;
        _this.controlType = 'file-input';
        _this.autofilled = false;
        _this._required = false;
        _this.accept = null;
        _this.id = "ngx-mat-file-input-" + FileInputComponent_1.nextId++;
        _this.describedBy = '';
        _this._onChange = function (_) { };
        _this._onTouched = function () { };
        if (_this.ngControl != null) {
            _this.ngControl.valueAccessor = _this;
        }
        fm.monitor(_elementRef.nativeElement, true).subscribe(function (origin) {
            _this.focused = !!origin;
            _this.stateChanges.next();
        });
        return _this;
    }
    FileInputComponent_1 = FileInputComponent;
    FileInputComponent.prototype.setDescribedByIds = function (ids) {
        this.describedBy = ids.join(' ');
    };
    Object.defineProperty(FileInputComponent.prototype, "value", {
        get: function () {
            return this.empty ? null : new FileInput(this._elementRef.nativeElement.value || []);
        },
        set: function (fileInput) {
            if (fileInput) {
                this.writeValue(fileInput);
                this.stateChanges.next();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FileInputComponent.prototype, "placeholder", {
        get: function () {
            return this._placeholder;
        },
        set: function (plh) {
            this._placeholder = plh;
            this.stateChanges.next();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FileInputComponent.prototype, "empty", {
        /**
         * Whether the current input has files
         */
        get: function () {
            return !this._elementRef.nativeElement.value || this._elementRef.nativeElement.value.length === 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FileInputComponent.prototype, "shouldLabelFloat", {
        get: function () {
            return this.focused || !this.empty || this.valuePlaceholder !== undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FileInputComponent.prototype, "required", {
        get: function () {
            return this._required;
        },
        set: function (req) {
            this._required = coerceBooleanProperty(req);
            this.stateChanges.next();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FileInputComponent.prototype, "isDisabled", {
        get: function () {
            return this.disabled;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FileInputComponent.prototype, "disabled", {
        get: function () {
            return this._elementRef.nativeElement.disabled;
        },
        set: function (dis) {
            this.setDisabledState(coerceBooleanProperty(dis));
            this.stateChanges.next();
        },
        enumerable: true,
        configurable: true
    });
    FileInputComponent.prototype.onContainerClick = function (event) {
        if (event.target.tagName.toLowerCase() !== 'input' && !this.disabled) {
            this._elementRef.nativeElement.querySelector('input').focus();
            this.focused = true;
            this.open();
        }
    };
    Object.defineProperty(FileInputComponent.prototype, "fileNames", {
        get: function () {
            return this.value ? this.value.fileNames : this.valuePlaceholder;
        },
        enumerable: true,
        configurable: true
    });
    FileInputComponent.prototype.writeValue = function (obj) {
        this._renderer.setProperty(this._elementRef.nativeElement, 'value', obj instanceof FileInput ? obj.files : null);
    };
    FileInputComponent.prototype.registerOnChange = function (fn) {
        this._onChange = fn;
    };
    FileInputComponent.prototype.registerOnTouched = function (fn) {
        this._onTouched = fn;
    };
    /**
     * Remove all files from the file input component
     * @param [event] optional event that may have triggered the clear action
     */
    FileInputComponent.prototype.clear = function (event) {
        if (event) {
            event.preventDefault();
            event.stopPropagation();
        }
        this.value = new FileInput([]);
        this._elementRef.nativeElement.querySelector('input').value = null;
        this._onChange(this.value);
    };
    FileInputComponent.prototype.change = function (event) {
        var fileList = event.target.files;
        var fileArray = [];
        if (fileList) {
            for (var i = 0; i < fileList.length; i++) {
                fileArray.push(fileList[i]);
            }
        }
        this.value = new FileInput(fileArray);
        this._onChange(this.value);
    };
    FileInputComponent.prototype.blur = function () {
        this.focused = false;
        this._onTouched();
    };
    FileInputComponent.prototype.setDisabledState = function (isDisabled) {
        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
    };
    FileInputComponent.prototype.ngOnInit = function () {
        this.multiple = coerceBooleanProperty(this.multiple);
    };
    FileInputComponent.prototype.open = function () {
        if (!this.disabled) {
            this._elementRef.nativeElement.querySelector('input').click();
        }
    };
    FileInputComponent.prototype.ngOnDestroy = function () {
        this.stateChanges.complete();
        this.fm.stopMonitoring(this._elementRef.nativeElement);
    };
    FileInputComponent.prototype.ngDoCheck = function () {
        if (this.ngControl) {
            // We need to re-evaluate this on every change detection cycle, because there are some
            // error triggers that we can't subscribe to (e.g. parent form submissions). This means
            // that whatever logic is in here has to be super lean or we risk destroying the performance.
            this.updateErrorState();
        }
    };
    var FileInputComponent_1;
    FileInputComponent.nextId = 0;
    FileInputComponent.ctorParameters = function () { return [
        { type: FocusMonitor },
        { type: ElementRef },
        { type: Renderer2 },
        { type: ErrorStateMatcher },
        { type: NgControl, decorators: [{ type: Optional }, { type: Self }] },
        { type: NgForm, decorators: [{ type: Optional }] },
        { type: FormGroupDirective, decorators: [{ type: Optional }] }
    ]; };
    __decorate([
        Input()
    ], FileInputComponent.prototype, "autofilled", void 0);
    __decorate([
        Input()
    ], FileInputComponent.prototype, "valuePlaceholder", void 0);
    __decorate([
        Input()
    ], FileInputComponent.prototype, "multiple", void 0);
    __decorate([
        Input()
    ], FileInputComponent.prototype, "accept", void 0);
    __decorate([
        Input()
    ], FileInputComponent.prototype, "errorStateMatcher", void 0);
    __decorate([
        HostBinding()
    ], FileInputComponent.prototype, "id", void 0);
    __decorate([
        HostBinding('attr.aria-describedby')
    ], FileInputComponent.prototype, "describedBy", void 0);
    __decorate([
        Input()
    ], FileInputComponent.prototype, "value", null);
    __decorate([
        Input()
    ], FileInputComponent.prototype, "placeholder", null);
    __decorate([
        HostBinding('class.mat-form-field-should-float')
    ], FileInputComponent.prototype, "shouldLabelFloat", null);
    __decorate([
        Input()
    ], FileInputComponent.prototype, "required", null);
    __decorate([
        HostBinding('class.file-input-disabled')
    ], FileInputComponent.prototype, "isDisabled", null);
    __decorate([
        Input()
    ], FileInputComponent.prototype, "disabled", null);
    __decorate([
        HostListener('change', ['$event'])
    ], FileInputComponent.prototype, "change", null);
    __decorate([
        HostListener('focusout')
    ], FileInputComponent.prototype, "blur", null);
    FileInputComponent = FileInputComponent_1 = __decorate([ __param(4, Optional()),
        __param(4, Self()),
        __param(5, Optional()),
        __param(6, Optional())
    ], FileInputComponent);
FileInputComponent.ɵfac = function FileInputComponent_Factory(t) { return new (t || FileInputComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ErrorStateMatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.NgControl, 10), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.NgForm, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.FormGroupDirective, 8)); };
FileInputComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: FileInputComponent, selectors: [["ngx-mat-file-input"]], hostVars: 6, hostBindings: function FileInputComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("change", function FileInputComponent_change_HostBindingHandler($event) { return ctx.change($event); })("focusout", function FileInputComponent_focusout_HostBindingHandler() { return ctx.blur(); });
    } if (rf & 2) {
        ɵngcc0.ɵɵhostProperty("id", ctx.id);
        ɵngcc0.ɵɵattribute("aria-describedby", ctx.describedBy);
        ɵngcc0.ɵɵclassProp("mat-form-field-should-float", ctx.shouldLabelFloat)("file-input-disabled", ctx.isDisabled);
    } }, inputs: { value: "value", placeholder: "placeholder", required: "required", disabled: "disabled", multiple: "multiple", autofilled: "autofilled", valuePlaceholder: "valuePlaceholder", accept: "accept", errorStateMatcher: "errorStateMatcher" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: MatFormFieldControl, useExisting: FileInputComponent_1 }]), ɵngcc0.ɵɵInheritDefinitionFeature], decls: 4, vars: 4, consts: [["type", "file"], ["input", ""], [1, "filename", 3, "title"]], template: function FileInputComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelement(0, "input", 0, 1);
        ɵngcc0.ɵɵelementStart(2, "span", 2);
        ɵngcc0.ɵɵtext(3);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("multiple", ctx.multiple ? "" : null)("accept", ctx.accept);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("title", ctx.fileNames);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate(ctx.fileNames);
    } }, styles: ["[_nghost-%COMP%]{display:inline-block;width:100%}[_nghost-%COMP%]:not(.file-input-disabled){cursor:pointer}input[_ngcontent-%COMP%]{width:0;height:0;opacity:0;overflow:hidden;position:absolute;z-index:-1}.filename[_ngcontent-%COMP%]{display:inline-block;text-overflow:ellipsis;overflow:hidden;width:100%}"] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FileInputComponent, [{
        type: Component,
        args: [{
                // tslint:disable-next-line:component-selector
                selector: 'ngx-mat-file-input',
                template: "<input #input type=\"file\" [attr.multiple]=\"multiple? '' : null\" [attr.accept]=\"accept\">\n<span class=\"filename\" [title]=\"fileNames\">{{ fileNames }}</span>\n",
                providers: [{ provide: MatFormFieldControl, useExisting: FileInputComponent_1 }],
                styles: [":host{display:inline-block;width:100%}:host:not(.file-input-disabled){cursor:pointer}input{width:0;height:0;opacity:0;overflow:hidden;position:absolute;z-index:-1}.filename{display:inline-block;text-overflow:ellipsis;overflow:hidden;width:100%}"]
            }]
    }], function () { return [{ type: ɵngcc1.FocusMonitor }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc2.ErrorStateMatcher }, { type: ɵngcc3.NgControl, decorators: [{
                type: Optional
            }, {
                type: Self
            }] }, { type: ɵngcc3.NgForm, decorators: [{
                type: Optional
            }] }, { type: ɵngcc3.FormGroupDirective, decorators: [{
                type: Optional
            }] }]; }, { describedBy: [{
            type: HostBinding,
            args: ['attr.aria-describedby']
        }], value: [{
            type: Input
        }], placeholder: [{
            type: Input
        }], shouldLabelFloat: [{
            type: HostBinding,
            args: ['class.mat-form-field-should-float']
        }], required: [{
            type: Input
        }], isDisabled: [{
            type: HostBinding,
            args: ['class.file-input-disabled']
        }], disabled: [{
            type: Input
        }], change: [{
            type: HostListener,
            args: ['change', ['$event']]
        }], blur: [{
            type: HostListener,
            args: ['focusout']
        }], multiple: [{
            type: Input
        }], autofilled: [{
            type: Input
        }], valuePlaceholder: [{
            type: Input
        }], accept: [{
            type: Input
        }], errorStateMatcher: [{
            type: Input
        }], id: [{
            type: HostBinding
        }] }); })();
    return FileInputComponent;
}(FileInputMixinBase));
export { FileInputComponent };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,