import { __decorate, __param } from "tslib";
import { Pipe, Optional, Inject } from '@angular/core';
import { FileInputConfig, NGX_MAT_FILE_INPUT_CONFIG } from '../model/file-input-config.model';
import * as ɵngcc0 from '@angular/core';
var ByteFormatPipe = /** @class */ (function () {
    function ByteFormatPipe(config) {
        this.config = config;
        this.unit = config ? config.sizeUnit : 'Byte';
    }
    ByteFormatPipe.prototype.transform = function (value, args) {
        if (parseInt(value, 10) >= 0) {
            value = this.formatBytes(+value, +args);
        }
        return value;
    };
    ByteFormatPipe.prototype.formatBytes = function (bytes, decimals) {
        if (bytes === 0) {
            return '0 ' + this.unit;
        }
        var B = this.unit.charAt(0);
        var k = 1024;
        var dm = decimals || 2;
        var sizes = [this.unit, 'K' + B, 'M' + B, 'G' + B, 'T' + B, 'P' + B, 'E' + B, 'Z' + B, 'Y' + B];
        var i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
    };
    ByteFormatPipe.ctorParameters = function () { return [
        { type: FileInputConfig, decorators: [{ type: Optional }, { type: Inject, args: [NGX_MAT_FILE_INPUT_CONFIG,] }] }
    ]; };
    ByteFormatPipe = __decorate([ __param(0, Optional()),
        __param(0, Inject(NGX_MAT_FILE_INPUT_CONFIG))
    ], ByteFormatPipe);
ByteFormatPipe.ɵfac = function ByteFormatPipe_Factory(t) { return new (t || ByteFormatPipe)(ɵngcc0.ɵɵdirectiveInject(NGX_MAT_FILE_INPUT_CONFIG, 8)); };
ByteFormatPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "byteFormat", type: ByteFormatPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ByteFormatPipe, [{
        type: Pipe,
        args: [{
                name: 'byteFormat'
            }]
    }], function () { return [{ type: FileInputConfig, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [NGX_MAT_FILE_INPUT_CONFIG]
            }] }]; }, null); })();
    return ByteFormatPipe;
}());
export { ByteFormatPipe };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnl0ZS1mb3JtYXQucGlwZS5qcyIsInNvdXJjZXMiOlsibmc6L25neC1tYXRlcmlhbC1maWxlLWlucHV0L2xpYi9waXBlL2J5dGUtZm9ybWF0LnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQWlCLFFBQVEsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDdEUsT0FBTyxFQUFFLGVBQWUsRUFBRSx5QkFBeUIsRUFBRSxNQUFNLGtDQUFrQyxDQUFDOztBQUs5RjtBQUFrRCxJQUdoRCx3QkFHVSxNQUF1QjtBQUNoQyxRQURTLFdBQU0sR0FBTixNQUFNLENBQWlCO0FBQ25DLFFBQ0ksSUFBSSxDQUFDLElBQUksR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQztBQUNsRCxJQUFFLENBQUM7QUFDSCxJQUNFLGtDQUFTLEdBQVQsVUFBVSxLQUFVLEVBQUUsSUFBVTtBQUFJLFFBQ2xDLElBQUksUUFBUSxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUU7QUFDbEMsWUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzlDLFNBQUs7QUFDTCxRQUFJLE9BQU8sS0FBSyxDQUFDO0FBQ2pCLElBQUUsQ0FBQztBQUVILElBQVUsb0NBQVcsR0FBbkIsVUFBb0IsS0FBYSxFQUFFLFFBQWlCO0FBQ3RELFFBQUksSUFBSSxLQUFLLEtBQUssQ0FBQyxFQUFFO0FBQ3JCLFlBQU0sT0FBTyxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztBQUM5QixTQUFLO0FBQ0wsUUFBSSxJQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNsQyxRQUFJLElBQU0sQ0FBQyxHQUFHLElBQUksQ0FBQztBQUNuQixRQUFJLElBQU0sRUFBRSxHQUFHLFFBQVEsSUFBSSxDQUFDLENBQUM7QUFDN0IsUUFBSSxJQUFNLEtBQUssR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsR0FBRyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDdEcsUUFBSSxJQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3hELFFBQUksT0FBTyxVQUFVLENBQUMsQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzdFLElBQUUsQ0FBQztBQUNGO0FBQ3lELGdCQXhCdEMsZUFBZSx1QkFGOUIsUUFBUSxZQUNSLE1BQU0sU0FBQyx5QkFBeUI7QUFDL0I7QUFBVSxJQU5ILGNBQWMsd0JBSDFCLElBQUksQ0FBQyxkQUdFLENBSUgsV0FBQSxRQUFRLEVBQUUsQ0FBQTtHQU5iLElBQUksRUFBRSxZQUFZLFVBQ25CLENBQUMsaENBTUQsUUFBSSxXQUFBLE1BQU0sQ0FBQyx5QkFBeUIsQ0FBQyxDQUFBO0FBQ3RDLE9BTmEsY0FBYyxDQTZCMUI7Ozs7Ozs7Ozs7Ozs7a0NBQ0Q7QUFBQyxJQURELHFCQUFDO0FBQ0EsQ0FEQSxBQTdCRCxJQTZCQztBQUNELFNBOUJhLGNBQWM7QUFBSSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0sIE9wdGlvbmFsLCBJbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEZpbGVJbnB1dENvbmZpZywgTkdYX01BVF9GSUxFX0lOUFVUX0NPTkZJRyB9IGZyb20gJy4uL21vZGVsL2ZpbGUtaW5wdXQtY29uZmlnLm1vZGVsJztcblxuQFBpcGUoe1xuICBuYW1lOiAnYnl0ZUZvcm1hdCdcbn0pXG5leHBvcnQgY2xhc3MgQnl0ZUZvcm1hdFBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcbiAgcHJpdmF0ZSB1bml0OiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgQE9wdGlvbmFsKClcbiAgICBASW5qZWN0KE5HWF9NQVRfRklMRV9JTlBVVF9DT05GSUcpXG4gICAgcHJpdmF0ZSBjb25maWc6IEZpbGVJbnB1dENvbmZpZ1xuICApIHtcbiAgICB0aGlzLnVuaXQgPSBjb25maWcgPyBjb25maWcuc2l6ZVVuaXQgOiAnQnl0ZSc7XG4gIH1cblxuICB0cmFuc2Zvcm0odmFsdWU6IGFueSwgYXJncz86IGFueSk6IGFueSB7XG4gICAgaWYgKHBhcnNlSW50KHZhbHVlLCAxMCkgPj0gMCkge1xuICAgICAgdmFsdWUgPSB0aGlzLmZvcm1hdEJ5dGVzKCt2YWx1ZSwgK2FyZ3MpO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICBwcml2YXRlIGZvcm1hdEJ5dGVzKGJ5dGVzOiBudW1iZXIsIGRlY2ltYWxzPzogbnVtYmVyKSB7XG4gICAgaWYgKGJ5dGVzID09PSAwKSB7XG4gICAgICByZXR1cm4gJzAgJyArIHRoaXMudW5pdDtcbiAgICB9XG4gICAgY29uc3QgQiA9IHRoaXMudW5pdC5jaGFyQXQoMCk7XG4gICAgY29uc3QgayA9IDEwMjQ7XG4gICAgY29uc3QgZG0gPSBkZWNpbWFscyB8fCAyO1xuICAgIGNvbnN0IHNpemVzID0gW3RoaXMudW5pdCwgJ0snICsgQiwgJ00nICsgQiwgJ0cnICsgQiwgJ1QnICsgQiwgJ1AnICsgQiwgJ0UnICsgQiwgJ1onICsgQiwgJ1knICsgQl07XG4gICAgY29uc3QgaSA9IE1hdGguZmxvb3IoTWF0aC5sb2coYnl0ZXMpIC8gTWF0aC5sb2coaykpO1xuICAgIHJldHVybiBwYXJzZUZsb2F0KChieXRlcyAvIE1hdGgucG93KGssIGkpKS50b0ZpeGVkKGRtKSkgKyAnICcgKyBzaXplc1tpXTtcbiAgfVxufVxuIl19